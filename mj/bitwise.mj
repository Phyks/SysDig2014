require utils.mj
require gates.mj
require arithmetics.mj

lsl(d:[reg_addr]) = () where
  add(d, d)

end where

lsr(d:[reg_addr]) = () where
  w1 = pop_register(d)	

  set_carry(w1[word-1])
  w = 0. w1[0..(word-2)]
 
  set_zero(w)
  n = set_negative(w)
  v = n xor (w1[word-1])

  push_register(d, w)  
end where

rol(d:[reg_addr]) = () where
  w1 = pop_register(d)

  c = get_carry()
  w = w1[1..].c
  
  set_zero(w)
  set_carry(w1[0])
  h = w[word-3]
  n = set_negative(w)
  v = n xor (w1[0])
  set_sign(n,v)

  push_register(d, w)
end where

ror(d:[reg_addr]) = () where
  w1 = pop_register(d)

  c = get_carry
  w = c.w1[0..(word-2)]
 
  set_carry(w1[word-1])
  set_zero(w)
  n = set_negative(w)
  v = n xor (w1[word-1])
  set_sign(n,v)

  push_register(d, w)
end where

asr(d:[reg_addr]) = () where
  w1 = pop_register(d)
  
  w = w1[0].w1[0..(word-2)]

  set_carry(w1[word-1])
  set_zero(w)
  n = set_negative(w) 
  v = n xor (w1[word-1])
  s = set_sign(n,v)

  push_register(d, w)
end where
 
