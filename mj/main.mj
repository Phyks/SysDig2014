require constants.mj
require arithmetics.mj
require bitwise.mj
require branching.mj
require gates.mj
require others.mj
require transfer.mj


route00010(o[0-10], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = cp(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = cpse(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o10);
end where

route00011(o[0-10], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = adc(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = sub(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o10);
end where

route0011(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsOut[16-31], Sout, PCout, SPout) = cpi(o7.o6.o5.o4, o11.o10.o9.o8.o3.o2.o1.o0, regs[16-31], S, PC, SP);
end where

route00100(o[0-10], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = eor(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = and_op(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o10);
end where

route00001(o[0-10], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = add(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = sbc(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o10);
end where

route00000(o[0-10], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = cpc(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (*  (regs[16-31]) = regs_identity(regs[16-31]); *)
  (*  S = S; *)
  (*  PC = PC; SP = SP; *)

  (regs2[16-31], S2, PC2, SP2) = nop(regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o10);
end where

route00101(o[0-10], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = mov(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = or_op(o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP);
  
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o10);
end where

route0001(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route00011(o[0-10], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route00010(o[0-10], regs[16-31], S, PC, SP);
  
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o11);
end where

route0010(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route00101(o[0-10], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route00100(o[0-10], regs[16-31], S, PC, SP);
  
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o11);
end where

route0000(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route00001(o[0-10], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route00000(o[0-10], regs[16-31], S, PC, SP);
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o11);
end where

route0101(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsOut[16-31], Sout, PCout, SPout) = subi(o7.o6.o5.o4, o11.o10.o9.o8.o3.o2.o1.o0, regs[16-31], S, PC, SP);
end where

route0100(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsOut[16-31], Sout, PCout, SPout) = sbci(o7.o6.o5.o4, o11.o10.o9.o8.o3.o2.o1.o0, regs[16-31], S, PC, SP);
end where

route0111(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsOut[16-31], Sout, PCout, SPout) = andi(o7.o6.o5.o4, o11.o10.o9.o8.o3.o2.o1.o0, regs[16-31], S, PC, SP);
end where

route0110(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsOut[16-31], Sout, PCout, SPout) = sbr(o7.o6.o5.o4, o11.o10.o9.o8.o3.o2.o1.o0, regs[16-31], S, PC, SP);
end where

route001(o[0-12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route0011(o[0-11], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route0010(o[0-11], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o12);
end where

route000(o[0-12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route0001(o[0-11], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route0000(o[0-11], regs[16-31], S, PC, SP);
  
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o12);
end where

route010(o[0-12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route0101(o[0-11], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route0100(o[0-11], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o12);
end where

route011(o[0-12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route0111(o[0-11], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route0110(o[0-11], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o12);
end where

route00(o[0-13], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route001(o[0-12], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route000(o[0-12], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o13);
end where

route01(o[0-13], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route011(o[0-12], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route010(o[0-12], regs[16-31], S, PC, SP);
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o13);
end where

route0(o[0-14], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route01(o[0-13], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route00(o[0-13], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o14);
end where

route111100_00(o0, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = breq(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = brlo(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o0);
end where

route111100_01(o0, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = brvs(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = brmi(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o0);
end where

route111100_10(o0, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = brhs(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = brlt(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o0);
end where

route111100_11(o0, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = nop(regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = brts(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o0);
end where

route111100_0(o0, o1, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route111100_01(o0, o[3-9], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route111100_00(o0, o[3-9], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o1);
end where

route111100_1(o0, o1, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route111100_11(o0, o[3-9], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route111100_10(o0, o[3-9], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o1);
end where

route111100(o[0-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route111100_1(o0, o1, o[3-9], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route111100_0(o0, o1, o[3-9], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o2);
end where

route111110(o[0-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = bst(o8.o7.o6.o5.o4, o2.o1.o0, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = bld(o8.o7.o6.o5.o4, o2.o1.o0, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o9);
end where

route111101_00(o0, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = brne(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = brsh(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o0);
end where

route111101_01(o0, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = brie(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = brpl(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o0);
end where

route111101_10(o0, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = brhc(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = brge(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o0);
end where

route111101_11(o0, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = brid(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = brtc(o9.o8.o7.o6.o5.o4.o3, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o0);
end where

route111101_0(o0, o1, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route111101_01(o0, o[3-9], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route111101_00(o0, o[3-9], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o1);
end where

route111101_1(o0, o1, o[3-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route111101_11(o0, o[3-9], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route111101_10(o0, o[3-9], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o1);
end where

route111101(o[0-9], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word])
= (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route111101_1(o0, o1, o[3-9], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route111101_0(o0, o1, o[3-9], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o2);
end where

route11111(o[0-10], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = sbrs(o8.o7.o6.o5.o4, o2.o1.o0, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route111110(o[0-9], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o10);
end where

route11110(o[0-10], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route111101(o[0-9], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route111100(o[0-9], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o10);
end where

route1111(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route11111(o[0-10], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route11110(o[0-10], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o11);
end where

route1001(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsOut[16-31], Sout, PCout, SPout) = ld(o8.o7.o6.o5.o4, o3, o2, o1, o0, regs[16-31], S, PC, SP)
end where

route1000(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = st(o8.o7.o6.o5.o4, o3, o2, o1, o0, regs[16-31], S, PC, SP);

  (regs2[16-31], S2, PC2, SP2) = ld(o8.o7.o6.o5.o4, o3, o2, o1, o0, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o11)
end where

route1010(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where

  next = rom<instr_addr_size, instr_size>(increase<word+word>(PC));
  (regs1[16-31], S1, PC1, SP1) = lds(o8.o7.o6.o5.o4, next, regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = sts(o8.o7.o6.o5.o4, next, regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o11)
end where

route1011(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (*  (regsOut[16-31], Sout, PCout, SPout) = in(o10.o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP) *)
  (regs1[16-31], S1, PC1, SP1) = in(regs[16-31], S, PC, SP);

  (*  (regsOut[16-31], Sout, PCout, SPout) = out(o10.o9.o3.o2.o1.o0, o8.o7.o6.o5.o4, regs[16-31], S, PC, SP) *)
  (regs2[16-31], S2, PC2, SP2) = out(regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o11)
end where

route1110(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsOut[16-31], Sout, PCout, SPout) = ldi(o7.o6.o5.o4, o11.o10.o9.o8.o3.o2.o1.o0, regs[16-31], S, PC, SP)
  (* (regsOut[16-31], Sout, PCout, SPout) = debug(regs[16-31], S, PC, SP); *)
end where

route1101(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsOut[16-31], Sout, PCout, SPout) = rcall(o11.o10.o9.o8.o7.o6.o5.o4.o3.o2.o1.o0, regs[16-31], S, PC, SP);
end where

route1100(o[0-11], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsOut[16-31], Sout, PCout, SPout) = rjmp(o11.o10.o9.o8.o7.o6.o5.o4.o3.o2.o1.o0, regs[16-31], S, PC, SP);
end where

route101(o[0-12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route1011(o[0-11], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route1010(o[0-11], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o12);
end where

route100(o[0-12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route1001(o[0-11], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route1000(o[0-11], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o12);
end where

route110(o[0-12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route1101(o[0-11], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route1100(o[0-11], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o12);
end where

route111(o[0-12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route1111(o[0-11], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route1110(o[0-11], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o12);
end where

route11(o[0-13], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route111(o[0-12], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route110(o[0-12], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o13);
end where

route10(o[0-13], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route101(o[0-12], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route100(o[0-12], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o13);
end where

route1(o[0-14], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route11(o[0-13], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route10(o[0-13], regs[16-31], S, PC, SP);
  
  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o14);
end where


route(o[0-15], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regs1[16-31], S1, PC1, SP1) = route1(o[0-14], regs[16-31], S, PC, SP);
  (regs2[16-31], S2, PC2, SP2) = route0(o[0-14], regs[16-31], S, PC, SP);

  (regsOut[16-31], Sout, PCout, SPout) = muxer(regs2[16-31], S2, PC2, SP2, regs1[16-31], S1, PC1, SP1, o15);
end where

main() = (opcode:[word+word], PC:[word+word], regsOut[16-31]:[word]) where
  (*  Initialize everything to zero, except SP which is RAMEND *)
  z = 0;

  (*  Get the opcode of the instruction *)
  opcode = rom<instr_addr_size, instr_size>(PC);
  (op[0-15]) = op_decomposer(opcode);

  (*  Route it to the instruction *)
  (regsOut[16-31], Sout, PCout, SPout) = route(op[0-15], regsIn[16-31], S, PC, SP);

  (*  Store the registers *)
  (regsIn[16-31]) = store_registers(regsOut[16-31]);
  S = reg_n<word>(Sout);
  PC = reg_n<word+word>(PCout);
  SP = reg_n<word+word>(SPout);
end where
