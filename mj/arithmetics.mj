require utils.mj
require flags.mj

(* Build and work *)
add(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  (R, c) = nadder<word>(Rd, Rr, 0);

  S7 = S[7];
  S6 = S[6];
  S5 = cH(R[3], Rd[3], Rr[3]);
  S3 = cV(R[7], Rd[7], Rr[7]);
  S4 = cS(S2, S3);
  S2 = R[7];
  S1 = cZ(R);
  S0 = cC(R[7], Rd[7], Rr[7]);

  Sout = setStatus(S[0-7]);

  (regsOut[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

(* Build and work *)
adc(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);
  
  (R, c) = nadder<word>(Rd, Rr, getC(S));

  S7 = S[7];
  S6 = S[6];
  S5 = cH(R[3], Rd[3], Rr[3]);
  S3 = cV(R[7], Rd[7], Rr[7]);
  S4 = cS(S2, S3);
  S2 = R[7];
  S1 = cZ(R);
  S0 = cC(R[7], Rd[7], Rr[7]);

  Sout = setStatus(S[0-7]);

  (regsOut[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

and_n<n>(a:[n], b:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = (a[0] and b[0]) . (and_n<n-1>(a[1..], b[1..]))
  end if
end where

(* Build and work *)
and_op(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  R = and_n<word>(Rd, Rr);

  S7 = S[7];
  S6 = S[6];
  S5 = S[5] ;			(*  H *)
  S3 = 0;			(*  V *)
  S4 = cS(S2, S3);
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = S[0]; 			(*  C *)

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

(* Build and work *)
andi(d:[reg_addr-1], K:[word], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsOut[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(0.d, regs[16-31]); (* TODO: change order *)

  R = and_n<word>(Rd, K);

  S7 = S[7];
  S6 = S[6];
  S5 = S[5]; 			(*  H *)
  S3 = 0;			(*  V *)
  S4 = cS(S2, S3);
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = S[0];			(*  C *)

  Sout = setStatus(S[0-7]);	

  (regsOut[16-31]) = push_register(1.d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

or_n<n>(a:[n], b:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    a0 = a[0];
    b0 = b[0];
    o = (or_n<n-1>(a[1..], b[1..])) . (a0 or b0)
  end if
end where

(* Build and work *)
or_op(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  R = or_n<word>(Rd, Rr);

  S7 = S[7];
  S6 = S[6];
  S5 = S[5]; 			(*  H *)
  S4 = cS(S2, S3);		(*  S *)
  S3 = 0;			(*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = S[0];

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

(* Build and work *)
ori(d:[reg_addr-1], K:[word], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(1.d, regs[16-31]);

  R = or_n<word>(Rd, K);

  S7 = S[7];
  S6 = S[6];
  S5 = S[5];
  S4 = cS(S2, S3);		(*  S *)
  S3 = 0;			(*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = S[0];

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(1.d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

xor_n<n>(a:[n], b:[n]) = (o:[n]) where
  if n = 0 then
    o=[]
  else
    o = (a[0] xor b[0]) . xor_n<n-1>(a[1..], b[1..])
  end if
end where

(* Build but works weirdly *)
eor(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  R = xor_n<word>(Rd, Rr);

  S7 = S[7];
  S6 = S[6];
  S5 = S[5];			(*  H *)
  S4 = cS(S2, S3);		(*  S *)
  S3 = 0;			(*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = S[0];			(*  C *)

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

com_n<n>(a:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = not(a[0]).com_n<n-1>(a[1..])
  end if
end where

(* Build but doesn't work *)
com(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  R = com_n<word>(Rd);

  S7 = S[7];
  S6 = S[6];
  S5 = S[5];
  S4 = cS(S2, S3);		(*  S *)
  S3 = 0;			(*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = 1;			(*  C *)

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

sbr(d:[reg_addr-1], K:[word], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  (regsout[16-31], Sout, PCout, SPout) = ori(d, K, regs[16-31], S, PC, SP)
end where

cbr(d:[reg_addr-1], K:[word], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  a = com_n<8>(K);
  (regsout[16-31], Sout, PCout, SPout) = andi(d, a, regs[16-31], S, PC, SP)
end where

(* Build but dafuk *)
inc(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);

  R = increase<word>(Rd);

  S7 = S[7];
  S6 = S[6];
  S5 = S[5];
  S4 = cS(S2, S3);		(*  S *)
  S3 = cV2(R);			(*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = S[0];			(*  C *)

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

(* Build *)
tst(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  R = and_n<word>(Rd, Rd);

  S7 = S[7];
  S6 = S[6];
  S5 = S[5];
  S4 = cS(S2, S3);		(*  S *)
  S3 = 0;			(*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = S[0]; 			(*  C *)

  Sout = setStatus(S[0-7]);
  (regsout[16-31], Strash, PCout, SPout) = and_op(d, d, regs[16-31], S, PC, SP)

end where
(* Build *)
clr(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  S7 = S[7]; 			(*  I *)
  S6 = S[6];			(*  T *)
  S5 = S[5];			(*  H *)
  S4 = 0;			(*  S *)
  S3 = 0;			(*  V *)
  S2 = 0;			(*  N *)
  S1 = 1;			(*  Z *)
  S0 = S[0]; 			(*  C *)

  Sout = setStatus(S[0-7]);
  (regsout[16-31], Strash, PCout, SPout) = eor(d, d, regs[16-31], S, PC, SP)
end where

(* Build *)
ser(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  o = allone<word>();
  
  (regsout[16-31]) = push_register(d, o, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
  Sout = S;
end where

(* Build *)
sub(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  (R, c) = nsubber<word>(Rd, Rr, 0);

  S7 = S[7];
  S6 = S[6];
  S5 = cH(not R[3], not Rd[3], Rr[3]);	(*  H *)
  S4 = cS(S2, S3);		(*  S *)
  S3 = cV(R[7], Rd[7], not Rr[7]); (*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = cC(not R[7], not Rd[7], Rr[7]); (*  C *)

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

(* Build and work *)
subi(d:[reg_addr-1], K:[word], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(1.d, regs[16-31]);

  (R, c) = nsubber<word>(Rd, K, 0);

  S7 = S[7];			(*  I *)
  S6 = S[6];			(*  T *)
  S5 = cH(not R[3], not Rd[3], K[3]);	(*  H *)
  S4 = cS(S2, S3);		(*  S *)
  S3 = cV(R[7], Rd[7], not K[7]); (*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = cC(not R[7], not Rd[7], K[7]); (*  C *)

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(1.d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

(* Build and work? *)
sbc(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where (*  TODO *)
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);
  
  (R, c) = nsubber<word>(Rd, Rr, getC(S));

  S7 = S[7];			(*  I *)
  S6 = S[6];			(*  T *)
  S5 = cH(not R[3], not Rd[3], Rr[3]);	(*  H *)
  S4 = cS(S2, S3);		(*  S *)
  S3 = cV(R[7], Rd[7], not Rr[7]); (*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = cC(not R[7], not Rd[7], Rr[7]); (*  C *)

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

(* Build and work*)
sbci(d:[reg_addr-1], K:[word], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where (*  TODO *)
  Rd = pop_register(1.d, regs[16-31]);
  
  (R, c) = nsubber<word>(Rd, K, getC(S));

  S7 = S[7];			(*  I *)
  S6 = S[6];			(*  T *)
  S5 = cH(not R[3], not Rd[3], K[3]);	(*  H *)
  S4 = cS(S2, S3);		(*  S *)
  S3 = cV(R[7], Rd[7], not K[7]); (*  V *)
  S2 = R[7];			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = cC(not R[7], not Rd[7], K[7]); (*  C *)

  Sout = setStatus(S[0-7]);

  (regsout[16-31]) = push_register(1.d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

(* Build and work? *)
neg(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  zero = zero<word>();

  (R, c) = nsubber<word>(zero, Rd, 0);

  S7 = S[7];			(*  I *)
  S6 = S[6];			(*  T *)
  S5 = R[3] or Rd[3];		(*  H *)
  S4 = cS(S2, S3);      		(*  S *)
  S3 = cV2(R);			(*  V *)
  S2 = R[7]; 			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = R[7] or R[6] or R[5] or R[4] or R[3] or R[2] or R[1] or R[0]; (*  C *)

  Sout = setStatus(S[0-7]);
  (regsout[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where

(* Build and work? *)
dec(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regsout[16-31]:[word], Sout:[word], PCout:[word+word], SPout:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  o = one<word>();

  (R, c) = nsubber<word>(o, Rd, 0);

  S7 = S[7];
  S6 = S[6];
  S5 = S[5];
  S4 = cS(S2, S3);      		(*  S *)
  S3 = cV3(R);			(*  V *)
  S2 = R[7]; 			(*  N *)
  S1 = cZ(R);			(*  Z *)
  S0 = S[0];

  Sout = setStatus(S[0-7]);
  (regsout[16-31]) = push_register(d, R, regs[16-31]);

  PCout = increase<ram_addr_size>(PC);
  SPout =  SP;
end where
