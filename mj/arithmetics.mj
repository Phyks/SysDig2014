require utils.mj
require gates.mj

adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
  if n = 0 then
    o = [];
    c_out = 0
  else(s_n1, c_n1)
    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);
    (s_n, c_out) = fulladder(a[0], b[0], c_n1);
    o = s_n . s_n1
  end if:
end where

add(r:[reg_addr], d:[reg_addr]) = () where
  w1 = pop_register(d)
  w2 = pop_register(r)

  (w, c) = adder<word>(w1, w2, 0)

  set_carry(c)
  set_zero(w)
  n = set_negative(w)
  v = set_overflow(w1, w2, w)
  set_sign(n, v)
  set_half_carry(w1, w2, w)

  push_register(d, w)
end where
