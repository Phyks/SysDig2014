rjmp(k:[12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where
  (PC, c) = nadder<word+word>(PC, 0.0.0.0.k, 1);

  Rdout = regs16;
  w = 0;
  S = S;
  SP = SP;
end where

ijmp(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where
  Z = regs31.regs30;

  (PC, c) = nadder<word+word>(PC, Z, 0);

  Rdout = regs16;
  w = 0;
  S = S;
  SP = SP;
end where

rcall(k:[12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  # save PC+1 on the stack
  PCtmp = increase<ram_addr_size>(PC);
  SP0 = push_stack(SP, PCtmp[..7]);
  SP = push_stack(SP0, PCtmp[8..]);

  (PC, c) = nadder<word+word>(PC, 0.0.0.0.k, 1); # PC ← PC+k+1
  Rdout = regs16;
  w = 0;
  S = S;
end where

icall(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where
  PC = regs31.regs30;

  # save PC+1 on the stack
  PCtmp = increase<ram_addr_size>(PC);
  SP0 = push_stack(SP, PCtmp[..7]);
  SP = push_stack(SP0, PCtmp[8..]);

  Rdout = regs16;
  w = 0;
  S = S;
end where

ret(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  # PC ← STACK(SP)
  (SP0, PC815) = pop_stack(SP);
  (SP, PC07) = pop_stack(SP0);

  PC = PC815.PC07;

  Rdout = regs16;
  w = 0;
  S = S;
end where

reti(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where
  two = one<word+word-1>().0;

  # PC ← STACK(SP)
  (SP0, PC815) = pop_stack(SP);
  (SP, PC07) = pop_stack(SP0);

  PC = PC815.PC07;

  S = setStatus(S[0..6], 1);
  Rdout = regs16;
  w = 0;
end where

cpse_brancher(Rd:[word], Rr:[word]) = (PC:[ram_addr_size]) where
  PC = mux_n<ram_addr_size>(iincrease<ram_addr_size>(PC), increase<ram_addr_size>(PC), equals<word>(Rd, Rr))
end where

cpse(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  PC = cpse_brancher(Rd, Rr);
  Rdout = regs16;
  w = 0;
  S = S;
  SP = SP;
end where

cp(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  (R, c) = nsubber<word>(Rr, Rd, 0);

  S5 = cH(R[3], (not Rd[3]), Rr[3]);
  S4 = cS(S2, S3);
  S3 = cV((not R[7]), Rd[7], (not Rr[7]));
  S2 = R[7];
  S1 = cZ(R);
  S0 = cC(R[7], (not Rd[7]), Rr[7]);

  S = setStatus(S[0-5], S[6], S[7]);

  Rdout = regs16;
  w = 0;
  SP = SP;
  PC = increase<ram_addr_size>(PC);
end where

cpc(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where # TODO
  Rdout = regs16;
  w = 0;
  S = S;
  PC = PC;
  SP = SP

#   S5 = cH(R[3], (not Rd[3]), Rr[3]);
#   S4 = cS(S2, S3);
#   S3 = cV((not R[7]), Rd[7], (not Rr[7]));
#   S2 = R[7];
#   S1 = cZ(R);
#   S0 = cC(R[7], (not Rd[7]), Rr[7]);

#   S = setStatus(S[0-5], S[6], S[7]);

#   PC = increase<ram_addr_size>(PC);
end where

cpi(d:[reg_addr-1], K:[8], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  Rd = pop_register(1.d, regs[16-31]);

  (R, c) = nsubber<word>(K, Rd, 0);

  S5 = cH(R[3], (not Rd[3]), K[3]);
  S4 = cS(S2, S3);
  S3 = cV((not R[7]), Rd[7], (not K[7]));
  S2 = R[7];
  S1 = cZ(R);
  S0 = cC(R[7], (not Rd[7]), K[7]);

  S = setStatus(S[0-5], S[6], S[7]);
  Rdout = regs16;
  w = 0;
  SP = SP;
  PC = increase<ram_addr_size>(PC);
end where

sbr_comparator(r, PC:[ram_addr_size], v) = (PC:[ram_addr_size]) where
  PC = mux_n<ram_addr_size>(iincrease<ram_addr_size>(PC), increase<ram_addr_size>(PC), not(r xor v))
end where

sbrc(r:[reg_addr], b:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  Rr = pop_register(r, regs[16-31]);

  r2 = getBit(Rr, b[0..2]);

  PC = sbr_comparator(r2, PC, 0);

  Rdout = regs16;
  w = 0;
  SP = SP;
  S = S;
end where

sbrs(r:[reg_addr], b:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  Rr = pop_register(r, regs[16-31]);
  r2 = getBit(Rr, b[0..2]);

  PC = sbr_comparator(r2, PC, 1);
  Rdout = regs16;
  w = 0;
  SP = SP;
  S = S;
end where

# sbic(k)
# end where

# sbis() = () where # TODO
# end where

brb_annex(PC:[word+word], k:[7], cond, val) = (PC:[word+word]) where
    # rewrite k in two complement's form on 16 bits
    k16 = k[0].0.0.0.0.0.0.0.0.0.0.k[1].k[2].k[3].k[4].k[5];
    (PC1, c1) = nadder<word+word>(PC, k16, 1); # TODO: check little/big endian
    PC = mux_n<word+word>(PC1, increase<ram_addr_size>(PC), not (cond xor val))
end where

brbs(k:[7], s:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where
  r = getBit(S, s[0..2]);
  PC = brb_annex(PC, k, r, 1);

  Rdout = regs16;
  w = 0;
  SP = SP;
  S = S;
end where

brbc(k:[7], s:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where
  r = getBit(S, s[0], s[1], s[2]);
  PC = brb_annex(PC, k, r, 0);

  Rdout = regs16;
  w = 0;
  SP = SP;
  S = S;
end where

breq(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  # S[0] = S[110] = Z
  (Rdout, S, PC, SP, w) = brbs(k, 0.0.1, regs[16-31], S, PC, SP)

end where

brne(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  # S[0] = S[110] = Z
  (Rdout, S, PC, SP, w) = brbc(k, 0.0.1, regs[16-31], S, PC, SP)

end where

brcs(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  # S[8] = S[118] = S
  (Rdout, S, PC, SP, w) = brbs(k, 0.0.0, regs[16-31], S, PC, SP)

end where

brcc(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  # S[8] = S[118] = S
  (Rdout, S, PC, SP, w) = brbc(k, 0.0.0, regs[16-31], S, PC, SP)

end where

brsh(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbc(k, 0.0.0, regs[16-31], S, PC, SP)
end where

brlo(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbs(k, 0.0.0, regs[16-31], S, PC, SP)
end where

brmi(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbs(k, 0.1.0, regs[16-31], S, PC, SP)
end where

brpl(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbc(k, 0.1.0, regs[16-31], S, PC, SP)
end where

brge(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbc(k, 1.0.0, regs[16-31], S, PC, SP)
end where

brlt(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbs(k, 1.0.0, regs[16-31], S, PC, SP)
end where

brhs(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbs(k, 1.0.1, regs[16-31], S, PC, SP)
end where

brhc(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbc(k, 1.0.1, regs[16-31], S, PC, SP)
end where

brts(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbs(k, 1.1.0, regs[16-31], S, PC, SP)
end where

brtc(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbc(k, 1.1.0, regs[16-31], S, PC, SP)
end where

brvs(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbs(k, 0.1.1, regs[16-31], S, PC, SP)
end where

brvc(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbc(k, 0.1.1, regs[16-31], S, PC, SP)
end where

brie(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbs(k, 1.1.1, regs[16-31], S, PC, SP)
end where

brid(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], S:[word], PC:[word+word], SP:[word+word], w) where

  (Rdout, S, PC, SP, w) = brbc(k, 1.1.1, regs[16-31], S, PC, SP)
end where
