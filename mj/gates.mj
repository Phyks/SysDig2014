not_n<n>(a:[n]) = (b:[n]) where
  if n = 0 then
    b = []
  else
    b = (not a[0]).not_n<n-1>(a[1..]);
  end if
end where

full_as( a , b , c , op ) = ( s , r ) where
  s = (a xor b) xor c;
  a' = op xor a; (*  0 xor a = a, 1 xor a = not a *)
  r = (a' and b) or ((a' xor b) and c)
end where

addsuber<n>(a:[n], b:[n], r_in, op) = (o:[n], r_out) where
  if n=0 then
    o = [];
    r_out = r_in
  else
    (s ,r ) = full_as( a[0] , b[0] , r_in , op );
    (o',r') = addsuber<n-1>( a[1..] , b[1..] , r , op );
    o = s . o';
    r_out = r'
  end if
end where

fulladder(a, b, c) = (s, r) where
  (s,r) = full_as(a,b,c,0);
end where

nadder<n>(a:[n], b:[n], r_in) = (o:[n], r_out) where
  (o,r_out) = addsuber<n>(a,b,r_in,0);
end where

add_n<n>(a:[n], b:[n]) = (o:[n], r) where
  (o, r) = nadder<n>(a, b, 0);
end where

fullsubber(a, b, c) = (s, r) where
  (s,r) = full_as(a,b,c,1)
end where

nsubber<n>(a:[n], b:[n], r_in) = (o:[n], r_out) where
  (o,r_out) = addsuber<n>(a,b,r_in,1);
end where
