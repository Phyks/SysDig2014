require utils.mj
require gates.mj
require arithmetics.mj

lsl(d:[reg_addr], regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  (regsOut[16-31], SOut, PCOut, SPOut) = add(d, d, regsIn[16-31], SIn, PCIn, SPIn)

end where

lsr(d:[reg_addr], regsIn[16-31]:[word], S:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  w1 = pop_register(d, regsIn[16-31]);

  a = w1[0];
  w = w1[1..] . 0;


  S7 = S[7]; (* I *)
  S6 = S[6]; (* T *)
  S5 = S[5]; (* H *)
  S4 = cS(S2, S3); (* S *)
  S3 = not a; (* V *)
  S2 = 0; (* N *)
  S1 = cZ(w); (* Z *)
  S0 = a; (* C *)

  SOut = setStatus(S[0-7]);

  (regsOut[16-31]) = push_register(d, w, regsIn[16-31]);

  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

rol(d:[reg_addr], regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  (regsOut[16-31], SOut, PCOut, SPOut) = adc(d, d, regsIn[16-31], SIn, PCIn, SPIn)
end where

ror(d:[reg_addr], regsIn[16-31]:[word], S:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  w1 = pop_register(d, regsIn[16-31]);

  w = w1[1..] . S0;

  S7 = S[7]; (* I *)
  S6 = S[6]; (* T *)
  S5 = S[5]; (* H *)
  S4 = cS(S2, S3); (* S *)
  S3 = w[0] xor w1[7]; (* V *)
  S2 = w[0]; (* N *)
  S1 = cZ(w); (* Z *)
  S0 = w1[7]; (* C *)

  SOut = setStatus(S[0-7]);

  (regsOut[16-31]) = push_register(d, w, regsIn[16-31]);

  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

asr(d:[reg_addr], regsIn[16-31]:[word], S:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  w1 = pop_register(d, regsIn[16-31]);

  w = w1[1..] . w1[7];

  S7 = S[7]; (* I *)
  S6 = S[6]; (* T *)
  S5 = S[5]; (* H *)
  S4 = cS(S2, S3); (* S *)
  S3 = w[0] xor w1[7]; (* V *)
  S2 = w[0]; (* N *)
  S1 = cZ(w); (* Z *)
  S0 = w1[7]; (* C *)

  SOut = setStatus(S[0-7]);

  (regsOut[16-31]) = push_register(d, w, regsIn[16-31]);

  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

swap(d:[reg_addr], regsIn[16-31]:[word], S:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  w1 = pop_register(d, regsIn[16-31]);

  w = w1[4].w1[5].w1[6].w1[7].w1[0].w1[1].w1[2].w1[3];

  S7 = S[7]; (* I *)
  S6 = S[6]; (* T *)
  S5 = S[5]; (* H *)
  S4 = S[4]; (* S *)
  S3 = S[3]; (* V *)
  S2 = S[2]; (* N *)
  S1 = S[1]; (* Z *)
  S0 = S[0]; (* C *)

  SOut = setStatus(S[0-7]);


  (regsOut[16-31]) = push_register(d, w, regsIn[16-31]);

  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

bset_brancher_setter(S[0-7]) = (SOut[0-7]) where
  SOut0 = S0;
  SOut1 = S1;
  SOut2 = S2;
  SOut3 = S3;
  SOut4 = S4;
  SOut5 = S5;
  SOut6 = S6;
  SOut7 = S7;
end where

bset_brancher(v, s[0-2], S[0-7]) = (SOut[0-7]) where
  (SOut[0-7]) = bset_brancher_setter(S[0-7]);
  SOut0 = mux(v, S0, (not s0) and (not s1) and (not s2));
  SOut1 = mux(v, S1, (not s0) and (not s1) and s2);
  SOut2 = mux(v, S2, (not s0) and s1 and (not s2));
  SOut3 = mux(v, S3, (not s0) and s1 and s2);
  SOut4 = mux(v, S4, s0 and (not s1) and (not s2));
  SOut5 = mux(v, S5, s0 and (not s1) and s2);
  SOut6 = mux(v, S6, s0 and s1 and (not s2));
  SOut7 = mux(v, S7, s0 and s1 and s2)
end where

bset(s:[3], regsIn[16-31]:[word], S:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  (SInt[0-7]) = bset_brancher(0, s[0..2], S[0..7]);

  SOut = setStatus(SInt[0-7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

bclr(s:[3], regsIn[16-31]:[word], S:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  (Sint[0-7]) = bset_brancher(1, s[0..2], S[0..7]);

  SOut = setStatus(Sint[0-7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

sbi() = (none) where (*  TODO: Not implemented *)
  none = 0
end where

cbi() = (none) where (*  TODO: Not implemented *)
  none = 0
end where

bst_brancher(Rd:[word], b[0-2]) = (T) where
  T = mux(mux(mux(Rd[7], Rd[6], b2), mux(Rd[5], Rd[4], b2), b1), mux(mux(Rd[3], Rd[2], b2), mux(Rd[1], Rd[0], b2), b1), b0)
end where

bst(d:[reg_addr], b:[3], regsIn[16-31]:[word], S:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  Rd = pop_register(d, regsIn[16-31]);

  S7 = S[7]; (* I *)
  S6 = bst_brancher(Rd, b[0..2]); (* T *)
  S5 = S[5]; (* H *)
  S4 = S[4]; (* S *)
  S3 = S[3]; (* V *)
  S2 = S[2]; (* N *)
  S1 = S[1]; (* Z *)
  S0 = S[0]; (* C *)

  SOut = setStatus(S[0-7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

bld_brancher(Rd:[word], T, b[0-2]) = (RdOut:[word]) where
  RdOut = mux_n<word>(mux_n<word>(mux_n<word>(Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7].T, Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].T.Rd[7], b2), mux_n<word>(Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].T.Rd[6].Rd[7], Rd[1].Rd[2].Rd[3].Rd[4].T.Rd[5].Rd[6].Rd[7], b2), b1), mux_n<word>(mux_n<word>(Rd[1].Rd[2].Rd[3].T.Rd[4].Rd[5].Rd[6].Rd[7], Rd[1].Rd[2].T.Rd[3].Rd[4].Rd[5].Rd[6].Rd[7], b2), mux_n<word>(Rd[1].T.Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7], T.Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7], b2), b1), b0)
end where

bld(d:[reg_addr], b:[3], regsIn[16-31]:[word], S:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  Rd = pop_register(d, regsIn[16-31]);

  Rd2 = bld_brancher(Rd, getT(S), b[0..2]);

  (regsOut[16-31]) = push_register(d, Rd2, regsIn[16-31]);
  SOut = S;
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

sec(regsIn[16-31]:[word], S:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(1, S[1..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

clc(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(0, SIn[1..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

sen(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..1], 1, SIn[3..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

cln(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..1], 0, SIn[3..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

sez(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0], 1, SIn[2..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

clz(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
   SOut = setStatus(SIn[0], 0, SIn[2..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

sei(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..6], 1);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

cli(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..6], 0);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

ses(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..3], 1, SIn[5..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

cls(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..3], 0, SIn[5..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

sev(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..2], 1, SIn[4..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

clv(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..2], 0, SIn[4..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

set(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..5], 1, SIn[7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

clt(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
    SOut = setStatus(SIn[0..5], 0, SIn[7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

seh(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..4], 1, SIn[6..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where

clh(regsIn[16-31]:[word], SIn:[word], PCIn:[word+word], SPIn:[word+word]) = (regsOut[16-31]:[word], SOut:[word], PCOut:[word+word], SPOut:[word+word]) where
  SOut = setStatus(SIn[0..4], 0, SIn[6..7]);

  (regsOut[16-31]) = regs_identity(regsIn[16-31]);
  PCOut = increase<ram_addr_size>(PCIn);
  SPOut = SPIn;
end where
