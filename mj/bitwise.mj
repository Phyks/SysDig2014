require utils.mj
require gates.mj
require arithmetics.mj

lsl(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  (regs[16-31], S, PC, SP) = add(d, d, regs[16-31], S, PC, SP)

end where

lsr(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  w1 = pop_register(d, regs[16-31]);

  a = (w1[wordm1]);
  w = 0. w1[0..(wordm2)];


  S7 = S[7]; #I
  S6 = S[6]; #T
  S5 = S[5]; #H
  S4 = cS(S2, S3); #S
  S3 = not a; #V
  S2 = 0; #N
  S1 = cZ(w); #Z
  S0 = a; #C

  S = setStatus(S[0-7]);

  (regs[16-31]) = push_register(d, w, regs[16-31]);

  PC = increase(PC);
  SP = SP;
end where

rol(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  w1 = pop_register(d, regs[16-31]);

  c = S[0];
  w = w1[1..].c;

  S7 = S[7]; #I
  S6 = S[6]; #T
  S5 = w1[4]; #H
  S4 = cS(S2, S3); #S
  S3 = w[0] xor w1[0]; #V
  S2 = w[0]; #N
  S1 = cZ(w); #Z
  S0 = w1[0]; #C

  S = setStatus(S[0-7]);

  (regs[16-31]) = push_register(d, w, regs[16-31]);

  PC = increase(PC);
  SP = SP;
end where

ror(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  w1 = pop_register(d, regs[16-31]);

  c = S[0];
  w = c.w1[0..(wordm2)];

  S7 = S[7]; #I
  S6 = S[6]; #T
  S5 = S[5]; #H
  S4 = cS(S2, S3); #S
  S3 = w[0] xor w1[7]; #V
  S2 = w[0]; #N
  S1 = cZ(w); #Z
  S0 = w1[7]; #C

  S = setStatus(S[0-7]);

  (regs[16-31]) = push_register(d, w, regs[16-31]);

  PC = increase(PC);
  SP = SP;
end where

asr(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  w1 = pop_register(d, regs[16-31]);

  w = w1[0].w1[0..(wordm2)];

  S7 = S[7]; #I
  S6 = S[6]; #T
  S5 = S[5]; #H
  S4 = cS(S2, S3); #S
  S3 = w[0] xor w1[7]; #V
  S2 = w[0]; #N
  S1 = cZ(w); #Z
  S0 = w1[7]; #C

  S = setStatus(S[0-7]);

  (regs[16-31]) = push_register(d, w, regs[16-31]);

  PC = increase(PC);
  SP = SP;
end where

swap(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  w1 = pop_register(d, regs[16-31]);

  w = w1[4].w1[5].w1[6].w1[7].w1[0].w1[1].w1[2].w1[3];

  S7 = S[7]; #I
  S6 = S[6]; #T
  S5 = S[5]; #H
  S4 = S[4]; #S
  S3 = S[3]; #V
  S2 = S[2]; #N
  S1 = S[1]; #Z
  S0 = S[0]; #C

  S = setStatus(S[0-7]);
 

  (regs[16-31]) = push_register(d,w, regs[16-31]);

  PC = increase(PC);
  SP = SP;
end where

bset_brancher_setter(S[0-7]) = (S[0-7]) where
  S0 = S0;
  S1 = S1;
  S2 = S2;
  S3 = S3;
  S4 = S4;
  S5 = S5;
  S6 = S6;
  S7 = S7;
end where
bset_brancher(v, s[0-2], S[0-7]) = (S[0-7]) where
  if s0 = 0 then
    if s1 = 0 then
      if s2 = 0 then		# 000
        (S[0-7]) = bset_brancher_setter(S[0-7]);        
        S0 = v
      else 			# 001
        (S[0-7]) = bset_brancher_setter(S[0-7]);
        S1 = v
      end if
    else
      if s2 = 0 then		# 010
        (S[0-7]) = bset_brancher_setter(S[0-7]);
        S2 = v
      else 			# 011
        (S[0-7]) = bset_brancher_setter(S[0-7]);
        S3 = v
      end if
    end if
  else
    if s1 = 0 then
      if s2 = 0 then		# 100
        (S[0-7]) = bset_brancher_setter(S[0-7]);
        S4 = v
      else 			# 101
        (S[0-7]) = bset_brancher_setter(S[0-7]);
        S5 = v
      end if
    else
      if s2 = 0 then		# 110
        (S[0-7]) = bset_brancher_setter(S[0-7]);
        S6 = v
      else 			# 111
        (S[0-7]) = bset_brancher_setter(S[0-7]);
        S7 = v
      end if
    end if
  end if
end where

bset(s, regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where 
  (S[0-7]) = bset_brancher(0, s, S[0..7]);
  
  S = setStatus(S[0-7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

bclr(s, regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where 
  (S[0-7]) = bset_brancher(1, s, S[0..7]);

  S = setStatus(S[0-7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

sbi() = (caca) where # TODO
  caca = 0
end where

cbi() = (caca) where # TODO
  caca = 0
end where

bst_brancher(Rd:[word], b[0-2]) = (T) where
  if b0 = 0 then
    if b1 = 0 then
      if b2 = 0 then		# 000
        T = Rd[0]
      else 			# 001
        T = Rd[1]
      end if
    else
      if b2 = 0 then		# 010
        T = Rd[2]
      else 			# 011
        T = Rd[3]
      end if
    end if
  else
    if b1 = 0 then
      if b2 = 0 then		# 100
        T = Rd[4]
      else 			# 101
        T = Rd[5]
      end if
    else
      if b2 = 0 then		# 110
        T = Rd[6]
      else 			# 111
        T = Rd[7]
      end if
    end if
  end if
end where

bst(d:[reg_addr], b:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where 
  Rd = pop_register(d, regs[16-31]);

  S7 = S[7]; #I
  S6 = bst_brancher(Rd, b); #T
  S5 = S[5]; #H
  S4 = S[4]; #S
  S3 = S[3]; #V
  S2 = S[2]; #N
  S1 = S[1]; #Z
  S0 = S[0]; #C

  S = setStatus(S[0-7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

bld_brancher(Rd:[word], T, b[0-2]) = (Rd:[word]) where
  if b0 = 0 then
    if b1 = 0 then
      if b2 = 0 then		# 000
        Rd = T.Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7]
      else 			# 001
        Rd = Rd[1].T.Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7]
      end if
    else
      if b2 = 0 then		# 010
        Rd = Rd[1].Rd[2].T.Rd[3].Rd[4].Rd[5].Rd[6].Rd[7]
      else 			# 011
        Rd = Rd[1].Rd[2].Rd[3].T.Rd[4].Rd[5].Rd[6].Rd[7]
      end if
    end if
  else
    if b1 = 0 then
      if b2 = 0 then		# 100
        Rd = Rd[1].Rd[2].Rd[3].Rd[4].T.Rd[5].Rd[6].Rd[7]
      else 			# 101
        Rd = Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].T.Rd[6].Rd[7]
      end if
    else
      if b2 = 0 then		# 110
        Rd = Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].T.Rd[7]
      else 			# 111
        Rd = Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7].T
      end if
    end if
  end if
end where

bld(d:[reg_addr], b, regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  Rd = pop_register(d, regs[16-31]);

  Rd = bld_brancher(Rd, getT(S), b);

  (regs[16-31]) = push_register(d, Rd, regs[16-31]);  
  S = S;
  PC = increase(PC);
  SP = SP;
end where

sec(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(1, S[1..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

clc(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(0, S[1..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

sen(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..1], 1, S[3..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

cln(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..1], 0, S[3..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

sez(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0], 1, S[2-7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

clz(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
   S = setStatus(S[0], 0, S[2-7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

sei(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..6], 1);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

cli(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..6], 0);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

ses(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..3], 1, S[5..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

cls(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..3], 0, S[5..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

sev(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..2], 1, S[4..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

clv(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..2], 0, S[4..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

set(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..5], 1, S[7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

clt(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
    S = setStatus(S[0..5], 0, S[7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

seh(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..4], 1, S[6..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where

clh(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  S = setStatus(S[0..4], 0, S[6..7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase(PC);
  SP = SP;
end where
