require gates.mj

equals<n>(a:[n], b:[n]) = c where
  if n = 1 then
    c =not (a[0] xor b[0])
  else
    c = equals<n-1>(a[1..], b[1..]) and (not (a[0] xor b[0]))
  end if
end where

(* mux_n(a, b, c) = b if c, else a *)
mux_n<n>(a:[n], b:[n], v) = (c:[n]) where
  if n = 0 then
    c = []
  else
    c = mux(v, b[0], a[0]).mux_n<n-1>(a[1..], b[1..], v);
  end if
end where

reg_n<n>(a:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = (reg a[0]).reg_n<n-1>(a[1..])
  end if
end where

muxer(regs_1_[16-31]:[word], S1:[word], PC1:[word+word], SP1:[word+word],
      regs_2_[16-31]:[word], S2:[word], PC2:[word+word], SP2:[word+word],
      v)
       = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  (* *1 if v else *2 *)
  regs16 = mux_n<word>(regs_2_16, regs_1_16, v);
  regs17 = mux_n<word>(regs_2_17, regs_1_17, v);
  regs18 = mux_n<word>(regs_2_18, regs_1_18, v);
  regs19 = mux_n<word>(regs_2_19, regs_1_19, v);
  regs20 = mux_n<word>(regs_2_20, regs_1_20, v);
  regs21 = mux_n<word>(regs_2_21, regs_1_21, v);
  regs22 = mux_n<word>(regs_2_22, regs_1_22, v);
  regs23 = mux_n<word>(regs_2_23, regs_1_23, v);
  regs24 = mux_n<word>(regs_2_24, regs_1_24, v);
  regs25 = mux_n<word>(regs_2_25, regs_1_25, v);
  regs26 = mux_n<word>(regs_2_26, regs_1_26, v);
  regs27 = mux_n<word>(regs_2_27, regs_1_27, v);
  regs28 = mux_n<word>(regs_2_28, regs_1_28, v);
  regs29 = mux_n<word>(regs_2_29, regs_1_29, v);
  regs30 = mux_n<word>(regs_2_30, regs_1_30, v);
  regs31 = mux_n<word>(regs_2_31, regs_1_31, v);
  S = mux_n<word>(S2, S1, v);
  PC = mux_n<word+word>(PC2, PC1, v);
  SP = mux_n<word+word>(SP2, SP1, v);
end where

regs_identity(regsIn[16-31]:[word]) = (regsOut[16-31]:[word]) where
  regsOut16 = regsIn16;
  regsOut17 = regsIn17;
  regsOut18 = regsIn18;
  regsOut19 = regsIn19;
  regsOut20 = regsIn20;
  regsOut21 = regsIn21;
  regsOut22 = regsIn22;
  regsOut23 = regsIn23;
  regsOut24 = regsIn24;
  regsOut25 = regsIn25;
  regsOut26 = regsIn26;
  regsOut27 = regsIn27;
  regsOut28 = regsIn28;
  regsOut29 = regsIn29;
  regsOut30 = regsIn30;
  regsOut31 = regsIn31;
end where

store_registers(regsOut[16-31]:[word]) = (regsIn[16-31]:[word]) where
  regsIn16 = reg_n<word>(regsOut16);
  regsIn17 = reg_n<word>(regsOut17);
  regsIn18 = reg_n<word>(regsOut18);
  regsIn19 = reg_n<word>(regsOut19);
  regsIn20 = reg_n<word>(regsOut20);
  regsIn21 = reg_n<word>(regsOut21);
  regsIn22 = reg_n<word>(regsOut22);
  regsIn23 = reg_n<word>(regsOut23);
  regsIn24 = reg_n<word>(regsOut24);
  regsIn25 = reg_n<word>(regsOut25);
  regsIn26 = reg_n<word>(regsOut26);
  regsIn27 = reg_n<word>(regsOut27);
  regsIn28 = reg_n<word>(regsOut28);
  regsIn29 = reg_n<word>(regsOut29);
  regsIn30 = reg_n<word>(regsOut30);
  regsIn31 = reg_n<word>(regsOut31);
end where


allone<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = 1.allone<n-1>()
  end if
end where

zero<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = 0.zero<n-1>()
  end if
end where

one<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else if n = 1 then
    o = 1
  else
    o = 0.one<n-1>()
  end if
  end if
end where

op_decomposer(opcode:[instr_size]) = (op[0-15]) where
  op0 = opcode[0];
  op1 = opcode[1];
  op2 = opcode[2];
  op3 = opcode[3];
  op4 = opcode[4];
  op5 = opcode[5];
  op6 = opcode[6];
  op7 = opcode[7];
  op8 = opcode[8];
  op9 = opcode[9];
  op10 = opcode[10];
  op11 = opcode[11];
  op12 = opcode[12];
  op13 = opcode[13];
  op14 = opcode[14];
  op15 = opcode[15];
end where

pusher(r[0-4], w:[word], regsIn[16-31]:[word]) = (regsOut[16-31]:[word]) where
  regsOut16 = mux_n<word>(regsIn16, w, (not r1) and (not r2) and (not r3) and (not r4));
  regsOut17 = mux_n<word>(regsIn17, w, (not r1) and (not r2) and (not r3) and r4);
  regsOut18 = mux_n<word>(regsIn18, w, (not r1) and (not r2) and r3 and (not r4));
  regsOut19 = mux_n<word>(regsIn19, w, (not r1) and (not r2) and r3 and r4);
  regsOut20 = mux_n<word>(regsIn20, w, (not r1) and r2 and (not r3) and (not r4));
  regsOut21 = mux_n<word>(regsIn21, w, (not r1) and r2 and (not r3) and r4);
  regsOut22 = mux_n<word>(regsIn22, w, (not r1) and r2 and r3 and (not r4));
  regsOut23 = mux_n<word>(regsIn23, w, (not r1) and r2 and r3 and r4);
  regsOut24 = mux_n<word>(regsIn24, w, r1 and (not r2) and (not r3) and (not r4));
  regsOut25 = mux_n<word>(regsIn25, w, r1 and (not r2) and (not r3) and r4);
  regsOut26 = mux_n<word>(regsIn26, w, r1 and (not r2) and r3 and (not r4));
  regsOut27 = mux_n<word>(regsIn27, w, r1 and (not r2) and r3 and r4);
  regsOut28 = mux_n<word>(regsIn28, w, r1 and r2 and (not r3) and (not r4));
  regsOut29 = mux_n<word>(regsIn29, w, r1 and r2 and (not r3) and r4);
  regsOut30 = mux_n<word>(regsIn30, w, r1 and r2 and r3 and (not r4));
  regsOut31 = mux_n<word>(regsIn31, w, r1 and r2 and r3 and r4)
end where

push_register(d:[reg_addr], w:[word], regsIn[16-31]:[word]) = (regsOut[16-31]:[word]) where
  (regsOut[16-31]) = pusher(d[0..4], w, regsIn[16-31])
end where

poper(r[0-4], regs[16-31]:[word]) = (w:[word]) where
  w = mux_n<word>( mux_n<word>( mux_n<word>( mux_n<word>(regs31, regs30, not (r0)),
                                             mux_n<word>(regs29, regs28, not (r0)),
					     not (r1)),
			  	mux_n<word>( mux_n<word>(regs27, regs26, not (r0)),
				             mux_n<word>(regs25, regs24, not (r0)),
					     not (r1)),
				not (r2)),
		   mux_n<word>( mux_n<word>( mux_n<word>(regs23, regs22, not (r0)),
		                             mux_n<word>(regs21, regs20, not (r0)),
					     not (r1)),
			        mux_n<word>( mux_n<word>(regs19, regs18, not (r0)),
				             mux_n<word>(regs17, regs16, not (r0)),
					     not (r1)),
                                not (r2)),
		   not (r3))
end where

pop_register(raddr:[reg_addr], regs[16-31]:[word]) = (w:[word]) where
  r0 = raddr[0];
  r1 = raddr[1];
  r2 = raddr[2];
  r3 = raddr[3];
  r4 = raddr[4];

  w = poper(r[0-4], regs[16-31])
end where

increase<n>(RIn:[n]) = (ROut:[n]) where	(*  simple increase *)
  o = one<n>();
  (ROut, c) = nadder<n>(RIn, o, 0);
end where

iincrease<n>(RIn:[n]) = (ROut:[n]) where	(*  double increase *)
  two = one<n-1>().0;
  (ROut, c) = nadder<n>(RIn, two, 0);
end where

decrease<n>(RIn:[n]) = (ROut:[n]) where 	(*  simple decrease *)
  o = one<n>();
  (ROut, c) = nsubber<n>(RIn, o, 0);
end where

getBit(wire:[word], s0, s1, s2) = (r) where
  r = mux( s2,
	mux(s1,  mux(s0, wire[7], wire[6]),
                mux(s0, wire[5], wire[4])
                )	,
           mux( s1, mux(s0, wire[3], wire[2]),
	        mux(s0, wire[1], wire[0])
                )
	)
end where


push_stack(SPIn:[ram_addr_size], w:[word]) = (SPOut:[ram_addr_size]) where
  (* o = ram<addr_size, word_size>(read_addr, write_enable, write_addr, write_data); *)
  o = ram<ram_addr_size, word>(SPIn, 1, SPIn, w);

  (*  decrease SP by the right amount *)
  SPOut = decrease<ram_addr_size>(SPIn);

end where

pop_stack(SPIn:[ram_addr_size]) = (SPOut:[ram_addr_size], o:[word]) where
  (* o = ram<addr_size, word_size>(read_addr, write_enable, write_addr, write_data); *)
  o = ram<ram_addr_size, word>(SPIn, 0, SPIn, zero<word>());

  SPOut = increase<ram_addr_size>(SPIn);
end where
