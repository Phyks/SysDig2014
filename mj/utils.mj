init_register(z:[word_size]) = (regs[16-31]) where
			       
  regs16 = reg (z);
  regs17 = reg (z);
  regs18 = reg (z);
  regs19 = reg (z);
  regs20 = reg (z);
  regs21 = reg (z);
  regs22 = reg (z);
  regs23 = reg (z);
  regs24 = reg (z);
  regs25 = reg (z);
  regs26 = reg (z);
  regs27 = reg (z);
  regs28 = reg (z);
  regs29 = reg (z);
  regs30 = reg (z);
  regs31 = reg (z);
end where

pusher(r[0-4], w:[word], regs[16-31]) = () where
  # if r0 = 0 then 
  #   if r1 = O then
  #     if r2 = 0 then
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           regs0 = w
  #         else
  #           regs1 = w
  #         end if #r4
  #       else
  #         if r4 = 0 then
  #           regs2 = w
  #         else 
  #           regs3 = w
  #         end if #r4
  #       end if #r3
  #     else
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           regs4 = w
  #         else
  #           regs5 = w
  #         end if # r4
  #       else
  #         if r4 = 0 then
  #           regs6 = w
  #         else
  #           regs7 = w
  #         end if #r4
  #       end if #r3
  #     end if #r2
  #   else
  #    if r2 = 0 then
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           regs8 = w
  #         else
  #           regs9 = w
  #         end if #r4
  #       else
  #         if r4 = 0 then
  #           regs10 = w
  #         else 
  #           regs11 = w
  #         end if #r4
  #       end if #r3
  #     else
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           regs12 = w
  #         else
  #           regs13 = w
  #         end if # r4
  #       else
  #         if r4 = 0 then
  #           regs14 = w
  #         else
  #           regs15 = w
  #         end if #r4
  #       end if #r3
  #     end if #r2
  #   end if #r1
  # else
    if r1 = O then
      if r2 = 0 then
        if r3 = 0 then
          if r4 = 0 then
            regs16 = w ;
          else
            regs17 = w ;
          end if #r4
        else
          if r4 = 0 then
            regs18 = w ;
          else
            regs19 = w ;
          end if #r4
        end if #r3
      else
        if r3 = 0 then
          if r4 = 0 then
            regs20 = w ;
          else
            regs21 = w ;
          end if # r4
        else
          if r4 = 0 then
            regs22 = w ;
          else
            regs23 = w ;
          end if #r4
        end if #r3
      end if #r2
    else
      if r2 = 0 then
        if r3 = 0 then
          if r4 = 0 then
            regs24 = w ;
          else
            regs25 = w ;
          end if #r4
        else
          if r4 = 0 then
            regs26 = w ;
          else
            regs27 = w ;
          end if #r4
        end if #r3
      else
        if r3 = 0 then
          if r4 = 0 then
            regs28 = w ;
          else
            regs29 = w ;
          end if # r4
        else
          if r4 = 0 then
            regs30 = w
          else
            regs31 = w
          end if #r4
        end if #r3
      end if #r2
    end if #r1
end where

push_register(d:[reg_addr], w:[word], regs[16-31]) = () where
  r0 = raddr[0];
  r1 = raddr[1];
  r2 = raddr[2];
  r3 = raddr[3];
  r4 = raddr[4];

  trash = pusher(r[0-4], w, regs[16-31])	
end where

poper(r[0-4], regs[16-31]) = (w:[word]) where
  # if r0 = 0 then 
  #   if r1 = O then
  #     if r2 = 0 then
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           w = regs0
  #         else
  #           w = regs1
  #         end if #r4
  #       else
  #         if r4 = 0 then
  #           w = regs2
  #         else 
  #           w = regs3
  #         end if #r4
  #       end if #r3
  #     else
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           w = regs4
  #         else
  #           w = regs5
  #         end if # r4
  #       else
  #         if r4 = 0 then
  #           w = regs6
  #         else
  #           w = regs7
  #         end if #r4
  #       end if #r3
  #     end if #r2
  #   else
  #    if r2 = 0 then
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           w = regs8
  #         else
  #           w = regs9
  #         end if #r4
  #       else
  #         if r4 = 0 then
  #           w = regs10
  #         else 
  #           w = regs11
  #         end if #r4
  #       end if #r3
  #     else
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           w = regs12
  #         else
  #           w = regs13
  #         end if # r4
  #       else
  #         if r4 = 0 then
  #           w = regs14
  #         else
  #           w = regs15
  #         end if #r4
  #       end if #r3
  #     end if #r2
  #   end if #r1
  # else
    if r1 = O then
      if r2 = 0 then
        if r3 = 0 then
          if r4 = 0 then
            w = regs16
          else
            w = regs17
          end if #r4
        else
          if r4 = 0 then
            w = regs18
          else
            w = regs19
          end if #r4
        end if #r3
      else
        if r3 = 0 then
          if r4 = 0 then
            w = regs20
          else
            w = regs21
          end if # r4
        else
          if r4 = 0 then
            w = regs22
          else
            w = regs23
          end if #r4
        end if #r3
      end if #r2
    else
      if r2 = 0 then
        if r3 = 0 then
          if r4 = 0 then
            w = regs24
          else
            w = regs25
          end if #r4
        else
          if r4 = 0 then
            w = regs26
          else
            w = regs27
          end if #r4
        end if #r3
      else
        if r3 = 0 then
          if r4 = 0 then
            w = regs28
          else
            w = regs29
          end if # r4
        else
          if r4 = 0 then
            w = regs30
          else
            w = regs31
          end if #r4
        end if #r3
      end if #r2
    end if #r1
  # end if #r0
end where

pop_register(raddr:[reg_addr], regs[16-31]) = (w:[word]) where
  r0 = raddr[0];
  r1 = raddr[1];
  r2 = raddr[2];
  r3 = raddr[3];
  r4 = raddr[4];
  
  w = poper(r[0-4], regs[16-31])
end where

allone<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = 1.allone<n-1>()
  end if
end where

allone<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = 0.allone<n-1>()
  end if
end where

one<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else if n = 1 then
    o = 1
  else
    o = 0.one<n-1>()
  end if
  end if
end where

set_zero(b) = (b) where
  b = check_zero<word>(w)
end where

set_negative(w) = (n) where
  n = w[7]
end where

set_overflow(wd:[word], wr:[word], w) = (v) where
  v = (wd[7] and wr[7] and (not w[7])) or ((not wd[7]) and (not wr[7]) and w[7])
end where

set_sign(n, v) = (s) where
  s = n xor v
end where

set_half_carry(wd:[word], wr:[word], w:[word]) = (h) where
  h = (wd[3] and wr[3]) or (wr[3] and (not w[3])) or ((not w[3]) and wd[3])
end where

set_carry(wd:[word], wr:[word], w:[word]) = (c) where
  c = (not wd[7] and wr[7]) or (wr[7] and w[7]) or (w[7] and (not wd[7]))
end where

increase<n>(R) = (R) where	# simple increase
  o = one<n>();
  (R,c) = adder(R, o, 0);
end where

iincrease<n>(R) = (R) where	# double increase
  two = one<n-1>().0;
  (R,c) = adder(R, o, 0);
end where

getBit(wire:[word], s0, s1, s2) = (r) where
  if s0 = 0 then
    if s1 = 0 then
      if s2 = 0 then		# 000
        r = wire[0]
      else 			# 001
        r = wire[1]
      end if
    else
      if s2 = 0 then		# 010
        r = wire[2]
      else 			# 011
        r = wire[3]
      end if
    end if
  else
    if s1 = 0 then
      if s2 = 0 then		# 100
        r = wire[4]
      else 			# 101
        r = wire[5]
      end if
    else
      if s2 = 0 then		# 110
        r = wire[6]
      else 			# 111
        r = wire[7]
      end if
    end if
  end if
end where