require utils.mj
require gates.mj
require arithmetics.mj

lsl(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  (Rdout, Sout, PCout, SPout, w) = add(d, d, regs[16-31], S, PC, SP)

end where

lsr(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where  
  Rd = pop_register(d, regs[16-31]);
  
  c = Rd[0];
  R = Rd[1..].0; (* Check here if pb with lsr *)
    
    S7 = S[7]; (* I *)
    S6 = S[6]; (* T *)
    S5 = S[5]; (* H *)
    S4 = cS(S2, S3); (* S *)
    S3 = S2 xor S0; (* V *)
    S2 = 0; (* N *)
    S1 = cZ(R); (* Z *)
    S0 = c; (* C *)

    Sout = setStatus(S[0-7]);

    Rdout = R;
    w = 1;

    PCout = increase<ram_addr_size>(PC);
    SPout = SP;
end where

rol(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  (Rdout, Sout, PCout, SPout, w) = adc(d, d, regs[16-31], S, PC, SP);
end where

ror(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Rd = pop_register(d, regs[16-31]);

  c = S[0];
  R = c.Rd[0..(word-2)];

  S7 = S[7]; (* I *)
  S6 = S[6]; (* T *)
  S5 = S[5]; (* H *)
  S4 = cS(S2, S3); (* S *)
  S3 = S2 xor S0; (* V *)
  S2 = R[0]; (* N *)
  S1 = cZ(R); (* Z *)
  S0 = Rd[0]; (* C *)

  Sout = setStatus(S[0-7]);

  Rdout = R;
  w = 1;

  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

asr(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Rd = pop_register(d, regs[16-31]);

  R = Rd[1..].Rd[word];

  S7 = S[7]; (* I *)
  S6 = S[6]; (* T *)
  S5 = S[5]; (* H *)
  S4 = cS(S2, S3); (* S *)
  S3 = S2 xor S0; (* V *)
  S2 = R[7]; (* N *)
  S1 = cZ(R); (* Z *)
  S0 = Rd[0]; (* C *)

  Sout = setStatus(S[0-7]);

  Rdout = R;
  w = 1;

  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

swap(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Rd = pop_register(d, regs[16-31]);

  R = Rd[4].Rd[5].Rd[6].Rd[7].Rd[0].Rd[1].Rd[2].Rd[3];

  S7 = S[7]; (* I *)
  S6 = S[6]; (* T *)
  S5 = S[5]; (* H *)
  S4 = S[4]; (* S *)
  S3 = S[3]; (* V *)
  S2 = S[2]; (* N *)
  S1 = S[1]; (* Z *)
  S0 = S[0]; (* C *)

  Sout = setStatus(S[0-7]);

  Rdout = R;
  w = 1;

  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

bset_brancher(v, s[0-2], S[0-7]) = (Sout[0-7]) where
  Sout0 = mux(v, S0, (not s0) and (not s1) and (not s2));
  Sout1 = mux(v, S1, (not s0) and (not s1) and s2);
  Sout2 = mux(v, S2, (not s0) and s1 and (not s2));
  Sout3 = mux(v, S3, (not s0) and s1 and s2);
  Sout4 = mux(v, S4, s0 and (not s1) and (not s2));
  Sout5 = mux(v, S5, s0 and (not s1) and s2);
  Sout6 = mux(v, S6, s0 and s1 and (not s2));
  Sout7 = mux(v, S7, s0 and s1 and s2)
end where

bset(s:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  (S[0-7]) = bset_brancher(0, s[0..2], S[0..7]);

  Sout = setStatus(S[0-7]);

  Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

bclr(s:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  (S[0-7]) = bset_brancher(1, s[0..2], S[0..7]);

  Sout = setStatus(S[0-7]);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

sbi() = (caca) where (*  TODO *)
  caca = 0
end where

cbi() = (caca) where (*  TODO *)
  caca = 0
end where

bst_brancher(Rd:[word], b[0-2]) = (T) where
  T = mux(mux(mux(Rd[7], Rd[6], b2), mux(Rd[5], Rd[4], b2), b1), mux(mux(Rd[3], Rd[2], b2), mux(Rd[1], Rd[0], b2), b1), b0)
end where

bst(d:[reg_addr], b:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Rd = pop_register(d, regs[16-31]);

  S7 = S[7]; (* I *)
  S6 = bst_brancher(Rd, b[0..2]); (* T *)
  S5 = S[5]; (* H *)
  S4 = S[4]; (* S *)
  S3 = S[3]; (* V *)
  S2 = S[2]; (* N *)
  S1 = S[1]; (* Z *)
  S0 = S[0]; (* C *)

  Sout = setStatus(S[0-7]);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

bld_brancher(Rd:[word], T, b[0-2]) = (Rd:[word]) where
  Rd = mux_n<word>(mux_n<word>(mux_n<word>(Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7].T, Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].T.Rd[7], b2), mux_n<word>(Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].T.Rd[6].Rd[7], Rd[1].Rd[2].Rd[3].Rd[4].T.Rd[5].Rd[6].Rd[7], b2), b1), mux_n<word>(mux_n<word>(Rd[1].Rd[2].Rd[3].T.Rd[4].Rd[5].Rd[6].Rd[7], Rd[1].Rd[2].T.Rd[3].Rd[4].Rd[5].Rd[6].Rd[7], b2), mux_n<word>(Rd[1].T.Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7], T.Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7], b2), b1), b0)
end where

bld(d:[reg_addr], b:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Rd = pop_register(d, regs[16-31]);

  Rd = bld_brancher(Rd, getT(S), b[0..2]);

  Rdout = regs16;
  w = 0;
  Sout = S;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

sec(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(1, S[1..7]);

  Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

clc(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(0, S[1..7]);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

sen(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..1], 1, S[3..7]);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

cln(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..1], 0, S[3..7]);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

sez(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0], 1, S[2..7]);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

clz(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
   Sout = setStatus(S[0], 0, S[2..7]);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

sei(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..6], 1);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

cli(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..6], 0);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

ses(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..3], 1, S[5..7]);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

cls(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..3], 0, S[5..7]);

    Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

sev(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..2], 1, S[4..7]);

  Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

clv(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..2], 0, S[4..7]);

  Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

set(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..5], 1, S[7]);

  Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

clt(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..5], 0, S[7]);

  Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

seh(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..4], 1, S[6..7]);

  Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where

clh(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  Sout = setStatus(S[0..4], 0, S[6..7]);

  Rdout = regs16;
  w = 0;
  PCout = increase<ram_addr_size>(PC);
  SPout = SP;
end where
