require utils.mj
require gates.mj
require arithmetics.mj

lsl(d:[reg_addr], regs[16-31], S:[word]) = (regs[16-31], S:[word]) where
  (regs[16-31]) = add(d, d, regs[16-31], S)

end where

lsr(d:[reg_addr], regs[16-31], S:[word]) = (regs[16-31], S:[word]) where
  w1 = pop_register(d, regs[16-31])

  a = (w1[word-1])
  w = 0. w1[0..(word-2)]


  S0 = S[0] #I
  S1 = S[1] #T
  S2 = S[2] #H
  S3 = cS(N, V) #S
  S4 = not a #V
  S5 = 0 #N
  S6 = cZ(w) #Z
  S7 = a #C

  S = setStatus(S[0-7], S);


  (regs[16-31]) = push_register(d, w, regs[16-31])
end where

rol(d:[reg_addr], regs[16-31], S:[word]) = (regs[16-31], S:[word]) where
  w1 = pop_register(d, regs[16-31])

  c = S[7]
  w = w1[1..].c

  S0 = S[0] #I
  S1 = S[1] #T
  S2 = w1[4] #H
  S3 = cS(N,V) #S
  S4 = w[0] xor w1[0] #V
  S5 = w[0] #N
  S6 = cZ(w) #Z
  S7 = w1[0] #C

  S = setStatus(S[0-7], S);

  (regs[16-31]) = push_register(d, w, regs[16-31])
end where

ror(d:[reg_addr], regs[16-31], S:[word]) = (regs[16-31], S:[word]) where
  w1 = pop_register(d, regs[16-31])

  c = S[7]
  w = c.w1[0..(word-2)]

  S0 = S[0] #I
  S1 = S[1] #T
  S2 = S[2] #H
  S3 = cS(N,V) #S
  S4 = w[0] xor w1[7] #V
  S5 = w[0] #N
  S6 = cZ(w) #Z
  S7 = w1[7] #C

  S = setStatus(S[0-7], S);

  (regs[16-31]) = push_register(d, w, regs[16-31])
end where

asr(d:[reg_addr], regs[16-31], S:[word]) = (regs[16-31], S:[word]) where
  w1 = pop_register(d, regs[16-31])

  w = w1[0].w1[0..(word-2)]

  S0 = S[0] #I
  S1 = S[1] #T
  S2 = S[2] #H
  S3 = cS(N,V) #S
  S4 = w[0] xor w1[7] #V
  S5 = w[0] #N
  S6 = cZ(w) #Z
  S7 = w1[7] #C

  S = setStatus(S[0-7], S);

  (regs[16-31]) = push_register(d, w, regs[16-31])
end where

swap(d:[reg_addr], regs[16-31], S:[word]) = (regs[16-31], S:[word]) where
  w1 = pop_register(d, regs[16-31])

  w = w1[4..7].w1[0..3]

  S0 = S[0] #I
  S1 = S[1] #T
  S2 = S[2] #H
  S3 = S[3] #S
  S4 = S[4] #V
  S5 = S[5] #N
  S6 = S[6] #Z
  S7 = S[7] #C

  S = setStatus(S[0-7], S);
 

  (regs[16-31]) = push_register(d,w, regs[16-31])
end where

bset(s, regs[16-31], S:[word]) = (regs[16-31], S:[word]) where 
  S0 = S[0] #I
  S1 = S[1] #T
  S2 = S[2] #H
  S3 = S[3] #S
  S4 = S[4] #V
  S5 = S[5] #N
  S6 = S[6] #Z
  S7 = S[7] #C

  if s = 0 then
    S7 = 1;
  else if s = 1 then
     S6 = 1;
       else if s = 2 then
	S5 = 1;
	else if s = 3 then
	  S4 = 1;
	  else if s = 4 then
	    S3 = 1;
	    else if s = 5 then
	      S2 = 1;
	      else if s = 6 then
		S1 = 1;
		else
		S0 = 1;
              end if  
	    end if
	  end if	
	end if
      end if
    end if
  end if

  S = setStatus(S[0-7], S);
end where

bclr(s, regs[16-31], S:[word]) = (regs[16-31], S:[word]) where 
  S0 = S[0] #I
  S1 = S[1] #T
  S2 = S[2] #H
  S3 = S[3] #S
  S4 = S[4] #V
  S5 = S[5] #N
  S6 = S[6] #Z
  S7 = S[7] #C

  if s = 0 then
    S7 = 0;
  else if s = 1 then
     S6 = 0;
       else if s = 2 then
	S5 = 0;
	else if s = 3 then
	  S4 = 0;
	  else if s = 4 then
	    S3 = 0;
	    else if s = 5 then
	      S2 = 0;
	      else if s = 6 then
		S1 = 0;
		else
		S0 = 0;
              end if  
	    end if
	  end if	
	end if
      end if
    end if
  end if

  S = setStatus(S[0-7], S);

end where

sbi() = () where # TODO
end where

cbi() = () where # TODO
end where

bst() = () where # TODO
end where

bld() = () where # TODO
end where

sec() = () where # TODO
end where

clc() = () where # TODO
end where

sen() = () where # TODO
end where

cln() = () where # TODO
end where

sez() = () where # TODO
end where

clz() = () where # TODO
end where

sei() = () where # TODO
end where

cli() = () where # TODO
end where

ses() = () where # TODO
end where

cls() = () where # TODO
end where

sev() = () where # TODO
end where

clv() = () where # TODO
end where

set() = () where # TODO
end where

clt() = () where # TODO
end where

seh() = () where # TODO
end where

clh() = () where # TODO
end where
