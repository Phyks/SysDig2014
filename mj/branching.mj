rjmp(k:[12], regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) where
  (PC, c) = adder<word+word>(PC, 0.0.0.0.k, 1)
end where

ijmp(regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) where
  Z = regs31.regs30;

  (PC, c) = adder<word+word>(PC, Z, 0)	
end where

rcall(k:[12], regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) where

  o = one<word+word>();
  two = one<word+word-1>().0;
  (PC, c) = adder<word+word>(PC, 0.0.0.0.k, 1); # PC ← PC+k+1
  (STACK, c) = adder<word+word>(PC, o, 0);	# STACK ← PC+1
  (SP, c) = subtracter<word+word>(SP, two); # SP ← SP-2
  
end where

icall(regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) where
  zero = zero<word+word>();
  two = one<word+word-1>().0;
  
  PC = regs31.regs30;
  (STACK, c) = adder<word+word>(PC, zero, 1);
  (SP, c) = subtracter<word+word>(SP, two):
end where

ret(regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) where
  two = one<word+word-1>().0;
  PC = STACK
  (SP, c) = adder<word+word>(SP, two, 0); 
end where

reti(regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) where
  two = one<word+word-1>().0;
  PC = STACK
  (SP, c) = adder<word+word>(SP, two, 0);

  S = setStatus(1, S[1-7], S)
end where

cpse_brancher(Rd:[word], Rr:[word]) = (PC) where
  if Rd = Rr then
    PC = iincrease(PC);		# PC = PC+2
  else
    PC = increase(PC);		# PC = PC+1
  end if
end where

cpse(r:[5], d:[5], regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  PC = cpse_brancher(Rd, Rr)
end where

cp(r:[5], d:[5], regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], STACK:[word+word], SP:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  (R, c) = subtracter<word>(Rr, Rd);
  
  S2 = cH(R[3], (not Rd[3]), Rr[3]);
  S3 = cS(N, V);
  S4 = cV((not R[7]), Rd[7], (not Rr[7]));
  S5 = R[7];
  S6 = cZ(R);
  S7 = cC(R[7], (not Rd[7]), Rr[7]);

  S = setStatus(S[0], S[1], S[2-7]);
  PC = increase(PC);
end where

cpc() = () where # TODO
end where

cpi() = () where # TODO
end where

sbrc() = () where # TODO
end where

sbrs() = () where # TODO
end where

sbic() = () where # TODO
end where

sbis() = () where # TODO
end where

brbs() = () where # TODO
end where

brbc() = () where # TODO
end where

breq() = () where # TODO
end where

brne() = () where # TODO
end where

brcs() = () where # TODO
end where

brcc() = () where # TODO
end where

brsh() = () where # TODO
end where

brlo() = () where # TODO
end where

brmi() = () where # TODO
end where

brpl() = () where # TODO
end where

brge() = () where # TODO
end where

brlt() = () where # TODO
end where

brhs() = () where # TODO
end where

brhc() = () where # TODO
end where

brts() = () where # TODO
end where

brtc() = () where # TODO
end where

brvs() = () where # TODO
end where

brvc() = () where # TODO
end where

brie() = () where # TODO
end where

brid() = () where # TODO
end where
