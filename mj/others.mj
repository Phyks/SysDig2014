break(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  (*  NOT implemented on simulator, TODO *)
  PCout = increase<ram_addr_size>(PC);
  Rdout = regs16;
  w = 0;
  SPout = SP;
  Sout = S;
end where

nop(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  PCout = increase<ram_addr_size>(PC);
  Rdout = regs16;
  w = 0;
  SPout = SP;
  Sout = S;
end where

sleep(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  (*  NOT implemented on simulator, TODO *)
  PCout = increase<ram_addr_size>(PC);
  Rdout = regs16;
  w = 0;
  SPout = SP;
  Sout = S;
end where

wdr(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (Rdout:[word], Sout:[word], PCout:[word+word], SPout:[word+word], w) where
  (*  NOT implemented on simulator, TODO *)
  PCout = increase<ram_addr_size>(PC);
  Rdout = regs16;
  w = 0;
  SPout = SP;
  Sout = S;
end where
