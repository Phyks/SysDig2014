require gates.mj


mux_n<n>(a:[n], b:[n], v) = (c:[n]) where
  if n = 0 then
    c = []
  else
    c = mux(a[0], b[0], v).mux_n<n-1>(a[1..], b[1..], v);
  end if
end where

reg_n<n>(a:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = (reg a[0]).reg_n<n-1>(a[1..])
  end if
end where


enableReg<n> (writeVal:[n], enable) = (val:[n]) where
  newVal = mux_n<n>(writeVal, val, enable);
  val = reg_n<n>(newVal);
end where

muxer(regs_1_[16-31]:[word], S1:[word], PC1:[word+word], SP1:[word+word],
      regs_2_[16-31]:[word], S2:[word], PC2:[word+word], SP2:[word+word],
      v)
       = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  regs16 = mux_n<word>(regs_1_16, regs_2_26, v);
  regs17 = mux_n<word>(regs_1_17, regs_2_27, v);
  regs18 = mux_n<word>(regs_1_18, regs_2_28, v);
  regs19 = mux_n<word>(regs_1_19, regs_2_29, v);
  regs20 = mux_n<word>(regs_1_20, regs_2_20, v);
  regs21 = mux_n<word>(regs_1_21, regs_2_21, v); 
  regs22 = mux_n<word>(regs_1_22, regs_2_22, v);
  regs23 = mux_n<word>(regs_1_23, regs_2_23, v);
  regs24 = mux_n<word>(regs_1_24, regs_2_24, v);
  regs25 = mux_n<word>(regs_1_25, regs_2_25, v);
  regs26 = mux_n<word>(regs_1_26, regs_2_26, v);
  regs27 = mux_n<word>(regs_1_27, regs_2_27, v);
  regs28 = mux_n<word>(regs_1_28, regs_2_28, v);
  regs29 = mux_n<word>(regs_1_29, regs_2_29, v);
  regs30 = mux_n<word>(regs_1_30, regs_2_30, v);
  regs31 = mux_n<word>(regs_1_31, regs_2_31, v);
  S = mux_n<word>(S1, S2, v);
  PC = mux_n<word+word>(PC1, PC2, v);
  SP = mux_n<word+word>(SP1, SP2, v);
	
end where

regs_identity(regs[16-31]:[word]) = (regs[16-31]:[word]) where
  regs16 = regs16;
  regs17 = regs17;
  regs18 = regs18;
  regs19 = regs19;
  regs20 = regs20;
  regs21 = regs21;
  regs22 = regs22;
  regs23 = regs23;
  regs24 = regs24;
  regs25 = regs25;
  regs26 = regs26;
  regs27 = regs27;
  regs28 = regs28;
  regs29 = regs29;
  regs30 = regs30;
  regs31 = regs31;
end where

allone<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = 1.allone<n-1>()
  end if
end where

zero<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = 0.allone<n-1>()
  end if
end where

one<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else if n = 1 then
    o = 1
  else
    o = 0.one<n-1>()
  end if
  end if
end where

init_register(z, SP_init:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  regs16 = z.z.z.z.z.z.z.z;
  regs17 = z.z.z.z.z.z.z.z;
  regs18 = z.z.z.z.z.z.z.z;
  regs19 = z.z.z.z.z.z.z.z;
  regs20 = z.z.z.z.z.z.z.z;
  regs21 = z.z.z.z.z.z.z.z;
  regs22 = z.z.z.z.z.z.z.z;
  regs23 = z.z.z.z.z.z.z.z;
  regs24 = z.z.z.z.z.z.z.z;
  regs25 = z.z.z.z.z.z.z.z;
  regs26 = z.z.z.z.z.z.z.z;
  regs27 = z.z.z.z.z.z.z.z;
  regs28 = z.z.z.z.z.z.z.z;
  regs29 = z.z.z.z.z.z.z.z;
  regs30 = z.z.z.z.z.z.z.z;
  regs31 = z.z.z.z.z.z.z.z;
  z2 = zero<word>();
  S = z2;
  PC = z2.z2;
  SP = SP_init;
end where

op_decomposer(opcode:[instr_size]) = (op[0-15]) where
  op0 = opcode[0];
  op1 = opcode[1];
  op2 = opcode[2];
  op3 = opcode[3];
  op4 = opcode[4];
  op5 = opcode[5];
  op6 = opcode[6];
  op7 = opcode[7];
  op8 = opcode[8];
  op9 = opcode[9];
  op10 = opcode[10];
  op11 = opcode[11];
  op12 = opcode[12];
  op13 = opcode[13];
  op14 = opcode[14];
  op15 = opcode[15];
end where

pusher(r[0-4], w:[word], regs[16-31]:[word]) = (regs[16-31]:[word]) where
  # if r0 = 0 then
  #   if r1 = O then
  #     if r2 = 0 then
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           regs0 = w
  #         else
  #           regs1 = w
  #         end if #r4
  #       else
  #         if r4 = 0 then
  #           regs2 = w
  #         else
  #           regs3 = w
  #         end if #r4
  #       end if #r3
  #     else
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           regs4 = w
  #         else
  #           regs5 = w
  #         end if # r4
  #       else
  #         if r4 = 0 then
  #           regs6 = w
  #         else
  #           regs7 = w
  #         end if #r4
  #       end if #r3
  #     end if #r2
  #   else
  #    if r2 = 0 then
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           regs8 = w
  #         else
  #           regs9 = w
  #         end if #r4
  #       else
  #         if r4 = 0 then
  #           regs10 = w
  #         else
  #           regs11 = w
  #         end if #r4
  #       end if #r3
  #     else
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           regs12 = w
  #         else
  #           regs13 = w
  #         end if # r4
  #       else
  #         if r4 = 0 then
  #           regs14 = w
  #         else
  #           regs15 = w
  #         end if #r4
  #       end if #r3
  #     end if #r2
  #   end if #r1
  # else
    if r1 = O then
      if r2 = 0 then
        if r3 = 0 then
          if r4 = 0 then
	    (regs[16-31]) = regs_identity(regs[16-31]);
            regs16 = w ;
          else
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs17 = w ;
          end if #r4
        else
          if r4 = 0 then
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs18 = w ;
          else
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs19 = w ;
          end if #r4
        end if #r3
      else
        if r3 = 0 then
          if r4 = 0 then
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs20 = w ;
          else
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs21 = w ;
          end if # r4
        else
          if r4 = 0 then
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs22 = w ;
          else
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs23 = w ;
          end if #r4
        end if #r3
      end if #r2
    else
      if r2 = 0 then
        if r3 = 0 then
          if r4 = 0 then
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs24 = w ;
          else
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs25 = w ;
          end if #r4
        else
          if r4 = 0 then
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs26 = w ;
          else
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs27 = w ;
          end if #r4
        end if #r3
      else
        if r3 = 0 then
          if r4 = 0 then
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs28 = w ;
          else
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs29 = w ;
          end if # r4
        else
          if r4 = 0 then
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs30 = w
          else
            (regs[16-31]) = regs_identity(regs[16-31]);
            regs31 = w
          end if #r4
        end if #r3
      end if #r2
    end if #r1
end where

push_register(d:[reg_addr], w:[word], regs[16-31]:[word]) = (regs[16-31]:[word]) where
  d0 = d[0];
  d1 = d[1];
  d2 = d[2];
  d3 = d[3];
  d4 = d[4];

  (regs[16-31]) = pusher(d[0-4], w, regs[16-31])
end where

poper(r[0-4], regs[16-31]:[word]) = (w:[word]) where
  # if r0 = 0 then
  #   if r1 = O then
  #     if r2 = 0 then
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           w = regs0
  #         else
  #           w = regs1
  #         end if #r4
  #       else
  #         if r4 = 0 then
  #           w = regs2
  #         else
  #           w = regs3
  #         end if #r4
  #       end if #r3
  #     else
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           w = regs4
  #         else
  #           w = regs5
  #         end if # r4
  #       else
  #         if r4 = 0 then
  #           w = regs6
  #         else
  #           w = regs7
  #         end if #r4
  #       end if #r3
  #     end if #r2
  #   else
  #    if r2 = 0 then
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           w = regs8
  #         else
  #           w = regs9
  #         end if #r4
  #       else
  #         if r4 = 0 then
  #           w = regs10
  #         else
  #           w = regs11
  #         end if #r4
  #       end if #r3
  #     else
  #       if r3 = 0 then
  #         if r4 = 0 then
  #           w = regs12
  #         else
  #           w = regs13
  #         end if # r4
  #       else
  #         if r4 = 0 then
  #           w = regs14
  #         else
  #           w = regs15
  #         end if #r4
  #       end if #r3
  #     end if #r2
  #   end if #r1
  # else
    if r1 = O then
      if r2 = 0 then
        if r3 = 0 then
          if r4 = 0 then
            w = regs16
          else
            w = regs17
          end if #r4
        else
          if r4 = 0 then
            w = regs18
          else
            w = regs19
          end if #r4
        end if #r3
      else
        if r3 = 0 then
          if r4 = 0 then
            w = regs20
          else
            w = regs21
          end if # r4
        else
          if r4 = 0 then
            w = regs22
          else
            w = regs23
          end if #r4
        end if #r3
      end if #r2
    else
      if r2 = 0 then
        if r3 = 0 then
          if r4 = 0 then
            w = regs24
          else
            w = regs25
          end if #r4
        else
          if r4 = 0 then
            w = regs26
          else
            w = regs27
          end if #r4
        end if #r3
      else
        if r3 = 0 then
          if r4 = 0 then
            w = regs28
          else
            w = regs29
          end if # r4
        else
          if r4 = 0 then
            w = regs30
          else
            w = regs31
          end if #r4
        end if #r3
      end if #r2
    end if #r1
  # end if #r0
end where

pop_register(raddr:[reg_addr], regs[16-31]:[word]) = (w:[word]) where
  r0 = raddr[0];
  r1 = raddr[1];
  r2 = raddr[2];
  r3 = raddr[3];
  r4 = raddr[4];

  w = poper(r[0-4], regs[16-31])
end where

increase<n>(R:[n]) = (R:[n]) where	# simple increase
  o = one<n>();
  (R, c) = nadder<n>(R, o, 0);
 
end where

iincrease<n>(R:[n]) = (R:[n]) where	# double increase
  two = one<n-1>().0;
  (R, c) = nadder<n>(R, two, 0);
end where

decrease<n>(R:[n]) = (R:[n]) where 	# simple decrease
  o = one<n>();
  (R, c) = nsubber<n>(R, o, 0);
end where

getBit(wire:[word], s0, s1, s2) = (r) where
  if s0 = 0 then
    if s1 = 0 then
      if s2 = 0 then		# 000
        r = wire[0]
      else 			# 001
        r = wire[1]
      end if
    else
      if s2 = 0 then		# 010
        r = wire[2]
      else 			# 011
        r = wire[3]
      end if
    end if
  else
    if s1 = 0 then
      if s2 = 0 then		# 100
        r = wire[4]
      else 			# 101
        r = wire[5]
      end if
    else
      if s2 = 0 then		# 110
        r = wire[6]
      else 			# 111
        r = wire[7]
      end if
    end if
  end if
end where


push_stack(SP:[ram_addr_size], w:[word]) = (SP:[ram_addr_size]) where
  #o = ram<addr_size, word_size>(read_addr, write_enable, write_addr, write_data);
  o = ram<ram_addr_size, word>(SP, 1, SP, w);

  # decrease SP by the right amount
  SP = decrease<ram_addr_size>(SP);

end where

pop_stack(SP:[ram_addr_size]) = (SP:[ram_addr_size], o:[word]) where
  #o = ram<addr_size, word_size>(read_addr, write_enable, write_addr, write_data);
  o = ram<ram_addr_size, word>(SP, 0, SP, zero<word>());

  SP = increase<ram_addr_size>(SP);
end where