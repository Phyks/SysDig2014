rjmp(k:[12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  (PC, c) = adder<word+word>(PC, 0.0.0.0.k, 1);

  (regs[16-31]) = regs_identity(regs[16-31]);
  S = S;
  SP = SP;
end where

ijmp(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  Z = regs31.regs30;

  (PC, c) = adder<word+word>(PC, Z, 0);

  (regs[16-31]) = regs_identity(regs[16-31]);
  S = S;
  SP = SP;
end where

rcall(k:[12], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  # save PC+1 on the stack
  PCtmp = increase(PC);
  SP0 = push(SP, PCtmp[0..7]);
  SP = push(SP0, PCtmp[8..15]);

  (PC, c) = adder<word+word>(PC, 0.0.0.0.k, 1); # PC ← PC+k+1
  
  (regs[16-31]) = regs_identity(regs[16-31]);
  S = S;
end where

icall(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where  
  PC = regs31.regs30;

  # save PC+1 on the stack
  PCtmp = increase(PC);
  SP0 = push(SP, PCtmp[0..7]);
  SP = push(SP0, PCtmp[8..15]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  S = S;
end where

ret(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  # PC ← STACK(SP)
  (PC815, SP0) = pop(SP);
  (PC07, SP) = pop(SP0);

  PC = PC815.PC07;

  (regs[16-31]) = regs_identity(regs[16-31]);
  S = S;
end where

reti(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  two = one<word+word-1>().0;
  PC = pop(SP);
  (SP, c) = adder<word+word>(SP, two, 0);

  S = setStatus(S[0..6], 1);
  (regs[16-31]) = regs_identity(regs[16-31]);
end where

cpse_brancher(Rd:[word], Rr:[word]) = (PC) where
  if Rd = Rr then
    PC = iincrease(PC);		# PC = PC+2
  else
    PC = increase(PC);		# PC = PC+1
  end if
end where

cpse(r:[5], d:[5], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  PC = cpse_brancher(Rd, Rr);
  (regs[16-31]) = regs_identity(regs[16-31]);
  S = S;
  SP = SP;
end where

cp(r:[reg_addr], d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  Rd = pop_register(d, regs[16-31]);
  Rr = pop_register(r, regs[16-31]);

  (R, c) = subtracter<word>(Rr, Rd);
  
  S5 = cH(R[3], (not Rd[3]), Rr[3]);
  S4 = cS(S2, S3);
  S3 = cV((not R[7]), Rd[7], (not Rr[7]));
  S2 = R[7];
  S1 = cZ(R);
  S0 = cC(R[7], (not Rd[7]), Rr[7]);

  S = setStatus(S[0-5], S[6], S[7]);

  (regs[16-31]) = regs_identity(regs[16-31]);
  SP = SP;
  PC = increase(PC);
end where

# cpc() = () where
#   # TODO
#   S5 = cH(R[3], (not Rd[3]), Rr[3]);
#   S4 = cS(S2, S3);
#   S3 = cV((not R[7]), Rd[7], (not Rr[7]));
#   S2 = R[7];
#   S1 = cZ(R);
#   S0 = cC(R[7], (not Rd[7]), Rr[7]);

#   S = setStatus(S[0-5], S[6], S[7]);
  
#   PC = increase(PC);
# end where

cpi(d:[reg_addr-1], K:[8], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(1.d, regs[16-31]);

  (R, c) = subtracter<word>(K, Rd);

  S5 = cH(R[3], (not Rd[3]), K[3]);
  S4 = cS(S2, S3);
  S3 = cV((not R[7]), Rd[7], (not K[7]));
  S2 = R[7];
  S1 = cZ(R);
  S0 = cC(R[7], (not Rd[7]), K[7]);

  S = setStatus(S[0-5], S[6], S[7]);
  (regs[16-31]) = regs_identity(regs[16-31]);
  SP = SP;
  PC = increase(PC);
end where

sbr_comparator(r, PC, v) = (PC) where
  if r = v then
    PC = iincrease(PC)
  else
    PC = increase(PC)
  end if
end where

sbrc(r:[reg_addr], b:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rr = pop_register(r, regs[16-31]);
  r = getBit(Rr, b[0..2]);

  PC = sbr_comparator(Rr, PC, 0);
end where

sbrs(r:[reg_addr], b:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rr = pop_register(r, regs[16-31]);
  r = getBit(Rr, b[0..2]);

  PC = sbr_comparator(Rr, PC, 1)
end where

# sbic(k)
# end where

# sbis() = () where # TODO
# end where

brb_annex(PC:[word+word], k:[7], cond, val) = (PC:[word+word]) where
  if cond = val then
    # rewrite k in two complement's form on 16 bits
    k16 = k[0].0.0.0.0.0.0.0.0.k[1].k[2].k[3].k[4].k[5];
    (PC, c) = adder<word+word>(PC, k16, 1); # TODO: check little/big endian
  else
    PC = increase(PC);
  end if
end where

brbs(k:[7], s:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  r = getBit(S, s[0..2]);
  PC = brb_annex(PC, k, r, 1);

  S = S; 
end where

brbc(k:[7], s:[3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  r = getBit(S, s[0..2]);
  PC = brb_annex(PC, k, r, 0);

end where

breq(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  # S[0] = S[110] = Z
  (regs[16-31], S, PC, SP) = brbs(k, 0.0.1, regs[16-31], S, PC, SP)

end where

brne(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  # S[0] = S[110] = Z
  (regs[16-31], S, PC, SP) = brbc(k, 0.0.1, regs[16-31], S, PC, SP)

end where

brcs(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  # S[8] = S[118] = S
  (regs[16-31], S, PC, SP) = brbs(k, 0.0.0, regs[16-31], S, PC, SP)

end where

brcc(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  # S[8] = S[118] = S
  (regs[16-31], S, PC, SP) = brbc(k, 0.0.0, regs[16-31], S, PC, SP)

end where

brsh(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbc(k, 0.0.0, regs[16-31], S, PC, SP)
end where

brlo(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbs(k, 0.0.0, regs[16-31], S, PC, SP)
end where

brmi(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbs(k, 0.1.0, regs[16-31], S, PC, SP)
end where

brpl(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbc(k, 0.1.0, regs[16-31], S, PC, SP)
end where

brge(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbc(k, 1.0.0, regs[16-31], S, PC, SP)
end where

brlt(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbs(k, 1.0.0, regs[16-31], S, PC, SP)
end where

brhs(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbs(k, 1.0.1, regs[16-31], S, PC, SP)
end where

brhc(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbc(k, 1.0.1, regs[16-31], S, PC, SP)
end where

brts(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbs(k, 1.1.0, regs[16-31], S, PC, SP)
end where

brtc(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbc(k, 1.1.0, regs[16-31], S, PC, SP)
end where

brvs(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbs(k, 0.1.1, regs[16-31], S, PC, SP)
end where

brvc(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbc(k, 0.1.1, regs[16-31], S, PC, SP)
end where

brie(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbs(k, 1.1.1, regs[16-31], S, PC, SP)
end where

brid(k:[7], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs[16-31], S, PC, SP) = brbc(k, 1.1.1, regs[16-31], S, PC, SP)
end where
