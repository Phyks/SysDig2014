require utils.mj

ldd(d:[reg_addr], address:[ram_addr_size], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  z = zero<word>();
  out = ram<ram_addr_size, word>(address, 0, z.z, z);

  (regs[16-31]) = push_register(d, out, regs[16-31]);
  PC = increase<ram_addr_size>(PC);
  SP = SP;
  S = S;
end where

ld_st_minus(xyz:[word+word]) = (xyz:[word+word]) where
  z = zero<word>();
  o = one<word>();
  (reg1, c) = nsubber<word>(xyz[word..], o, 0);
  carry = z[0..(word-2)].c;
  (reg2, c2) = nsubber<word>(xyz[..(word-1)], carry, 0);
  xyz = reg2.reg1
end where

ld_st_plus(xyz:[word+word]) = (xyz:[word+word]) where
  z = zero<word>();
  (reg1, c1) = nadder<word>(xyz[word..], z, 1);
  (reg2, c2) = nadder<word>(xyz[..(word-1)], z, c1);
  xyz = reg2.reg1
end where

ld(d:[reg_addr], o[0-3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  xyz = mux_n<word+word>(mux_n<word+word>(regs27.regs26, regs29.regs28, o2), regs31.regs30, o3);
  xyz = mux_n<word+word>(ld_st_minus(xyz), xyz, (not o0) and o1);
  (regs[16-31], S, PC, SP) = ldd(d, xyz, regs[16-31], S, PC, SP);
  xyz = mux_n<word+word>(ld_st_plus(xyz), xyz, o0);

  regs26 = mux_n<word>(xyz[word..], regs26, o3 and o2);
  regs27 = mux_n<word>(xyz[..(word-1)], regs27, o3 and o2);
  regs28 = mux_n<word>(xyz[word..], regs28, o3 and (not o2));
  regs29 = mux_n<word>(xyz[..(word-1)], regs29, o3 and (not o2));
  regs30 = mux_n<word>(xyz[word..], regs30, not o3);
  regs31 = mux_n<word>(xyz[..(word-1)], regs31, not o3);
end where

lds(d:[reg_addr], k:[instr_size], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  w = ram<ram_addr_size, word>(k, 0, k, zero<word>());

  (regs[16-31]) = push_register(d, w, regs[16-31]);
  SP = SP;
  S = S;
  PC = iincrease<ram_addr_size>(PC)

end where

std(w:[word], address:[ram_addr_size], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  z = zero<word>();
  out = ram<ram_addr_size, word>(address, 1, address, w);

  (regs[16-31]) = regs_identity(regs[16-31]);
  PC = increase<ram_addr_size>(PC);
  SP = SP;
  S = S;
end where

st_annex(w:[word], o[0-3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  xyz = mux_n<word+word>(mux_n<word+word>(regs27.regs26, regs29.regs28, o2), regs31.regs30, o3);
  xyz = mux_n<word+word>(ld_st_minus(xyz), xyz, (not o0) and o1);
  (regs[16-31], S, PC, SP) = std(w, xyz, regs[16-31], S, PC, SP);
  xyz = mux_n<word+word>(ld_st_plus(xyz), xyz, o0);

  regs26 = mux_n<word>(xyz[word..], regs26, o3 and o2);
  regs27 = mux_n<word>(xyz[..(word-1)], regs27, o3 and o2);
  regs28 = mux_n<word>(xyz[word..], regs28, o3 and (not o2));
  regs29 = mux_n<word>(xyz[..(word-1)], regs29, o3 and (not o2));
  regs30 = mux_n<word>(xyz[word..], regs30, not o3);
  regs31 = mux_n<word>(xyz[..(word-1)], regs31, not o3);
end where

st(r:[reg_addr], o[0-3], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  w = pop_register(r, regs[16-31]);
  (regs[16-31], S, PC, SP) = st_annex(w, o[0-3], regs[16-31], S, PC, SP);
end where

sts(r:[reg_addr], k:[ram_addr_size], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  Rr = pop_register(r, regs[16-31]);
  out = ram<ram_addr_size, word>(k, 1, k, Rr);

  PC = iincrease<ram_addr_size>(PC);
  S = S;
  SP = SP;
  (regs[16-31]) = regs_identity(regs[16-31]);
end where

in(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  (*  Not implemented *)
  PC = increase<ram_addr_size>(PC);
  S = S;
  SP = SP;
  (regs[16-31]) = regs_identity(regs[16-31]);

end where

out(regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  (*  Not implemented *)
  PC = increase<ram_addr_size>(PC);
  S = S;
  SP = SP;
  (regs[16-31]) = regs_identity(regs[16-31]);
end where

push(r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  Rr = pop_register(r, regs[16-31]);

  out = ram<instr_size, word>(SP, 1, SP, Rr);

  SP = decrease<ram_addr_size>(SP);
  S = S;
  PC = increase<ram_addr_size>(PC);
  (regs[16-31]) = regs_identity(regs[16-31]);
end where

pop(d:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where
  SP = increase<ram_addr_size>(SP);

  out = ram<instr_size, word>(SP, 0, SP, one<word>()); (*  le one ne sert à rien à part à compléter la ram *)

  (regs[16-31]) = push_register(d, out, regs[16-31]);
  S = S;
  PC = increase<ram_addr_size>(PC);
end where

mov(d:[reg_addr], r:[reg_addr], regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs[16-31]:[word], S:[word], PC:[word+word], SP:[word+word]) where (*  TODO *)
  (regs[16-31]) = regs_identity(regs[16-31]);
  S = S;
  SP = SP;
  PC = PC;
end where
