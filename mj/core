const word = 8;

const wordm1 = 7;

const wordm2 = 6;

const reg_addr = 5;

const instr_addr_size = 16; 

const instr_size = 16;

const ram_addr_size = 16;

const nb_registers = 16;

not_n<n>(a:[n]) = (b:[n]) where

  if n = 0 then

    b = []

  else

    b = (not a[0]).not_n<n-1>(a[1..]);

  end if

end where



fulladder(a,b,c) = (s, r) where

    s = (a xor b) xor c;

    r = (a and b) + ((a xor b) and c) ;

end where



adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where

  if n = 0 then

    o = [];

    c_out = 0

  else				

    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);

    (s_n, c_out) = fulladder(a[0], b[0], c_n1);

    o = s_n . s_n1

  end if

end where



subtracter<n>(a:[n], b:[n]) = (o:[n], c_out) where 

  

  an = not_n<n>(a);

  (o, c) = adder<n>(an, b, 1) ;

  c_out = c and 1

end where

  





regs_identity(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  regs16 = regs16;

  regs17 = regs17;

  regs18 = regs18;

  regs19 = regs19;

  regs20 = regs20;

  regs21 = regs21;

  regs22 = regs22;

  regs23 = regs23;

  regs24 = regs24;

  regs25 = regs25;

  regs26 = regs26;

  regs27 = regs27;

  regs28 = regs28;

  regs29 = regs29;

  regs30 = regs30;

  regs31 = regs31;

end where



allone<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = 1.allone<n-1>()

  end if

end where



zero<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = 0.allone<n-1>()

  end if

end where



one<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else if n = 1 then

    o = 1

  else

    o = 0.one<n-1>()

  end if

  end if

end where



init_register(z, SP_init:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  regs16 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs17 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs18 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs19 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs20 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs21 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs22 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs23 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs24 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs25 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs26 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs27 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs28 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs29 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs30 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs31 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  z2 = zero<word>();

  S = z2;

  PC = z2.z2;

  SP = SP_init;

end where



op_decomposer(opcode:[instr_size]) = (op0, op1, op2, op3, op4, op5, op6, op7, op8, op9, op10, op11, op12, op13, op14, op15) where

  op0 = opcode[0];

  op1 = opcode[1];

  op2 = opcode[2];

  op3 = opcode[3];

  op4 = opcode[4];

  op5 = opcode[5];

  op6 = opcode[6];

  op7 = opcode[7];

  op8 = opcode[8];

  op9 = opcode[9];

  op10 = opcode[10];

  op11 = opcode[11];

  op12 = opcode[12];

  op13 = opcode[13];

  op14 = opcode[14];

  op15 = opcode[15];

end where



pusher(r0, r1, r2, r3, r4, w:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

    if r1 = O then

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

	    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs16 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs17 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs18 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs19 = w ;

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs20 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs21 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs22 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs23 = w ;

          end if 

        end if 

      end if 

    else

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs24 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs25 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs26 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs27 = w ;

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs28 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs29 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs30 = w

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs31 = w

          end if 

        end if 

      end if 

    end if 

end where



push_register(d:[reg_addr], w:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  d0 = d[0];

  d1 = d[1];

  d2 = d[2];

  d3 = d[3];

  d4 = d[4];



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = pusher(d0, d1, d2, d3, d4, w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31)

end where



poper(r0, r1, r2, r3, r4, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (w:[word]) where

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

    if r1 = O then

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            w = regs16

          else

            w = regs17

          end if 

        else

          if r4 = 0 then

            w = regs18

          else

            w = regs19

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            w = regs20

          else

            w = regs21

          end if 

        else

          if r4 = 0 then

            w = regs22

          else

            w = regs23

          end if 

        end if 

      end if 

    else

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            w = regs24

          else

            w = regs25

          end if 

        else

          if r4 = 0 then

            w = regs26

          else

            w = regs27

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            w = regs28

          else

            w = regs29

          end if 

        else

          if r4 = 0 then

            w = regs30

          else

            w = regs31

          end if 

        end if 

      end if 

    end if 

  

end where



pop_register(raddr:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (w:[word]) where

  r0 = raddr[0];

  r1 = raddr[1];

  r2 = raddr[2];

  r3 = raddr[3];

  r4 = raddr[4];



  w = poper(r0, r1, r2, r3, r4, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31)

end where



increase<n>(R:[n]) = (R:[n]) where	

  o = one<n>();

  (R, c) = adder<n>(R, o, 0);

 

end where



iincrease<n>(R:[n]) = (R:[n]) where	

  two = one<n-1>().0;

  (R, c) = adder<n>(R, two, 0);

end where



decrease<n>(R:[n]) = (R:[n]) where 	

  o = one<n>();

  (R, c) = subtracter<n>(R, o);

end where



getBit(wire:[word], s0, s1, s2) = (r) where

  if s0 = 0 then

    if s1 = 0 then

      if s2 = 0 then		

        r = wire[0]

      else 			

        r = wire[1]

      end if

    else

      if s2 = 0 then		

        r = wire[2]

      else 			

        r = wire[3]

      end if

    end if

  else

    if s1 = 0 then

      if s2 = 0 then		

        r = wire[4]

      else 			

        r = wire[5]

      end if

    else

      if s2 = 0 then		

        r = wire[6]

      else 			

        r = wire[7]

      end if

    end if

  end if

end where





push_stack(SP:[ram_addr_size], w:[word]) = (SP:[ram_addr_size]) where

  

  o = ram<ram_addr_size, word>(SP, 1, SP, w);



  

  SP = decrease<ram_addr_size>(SP);



end where



pop_stack(SP:[ram_addr_size]) = (SP:[ram_addr_size], o:[word]) where

  

  o = ram<ram_addr_size, word>(SP, 0, SP, zero<word>());



  SP = increase<ram_addr_size>(SP);

end where
not_n<n>(a:[n]) = (b:[n]) where

  if n = 0 then

    b = []

  else

    b = (not a[0]).not_n<n-1>(a[1..]);

  end if

end where



fulladder(a,b,c) = (s, r) where

    s = (a xor b) xor c;

    r = (a and b) + ((a xor b) and c) ;

end where



adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where

  if n = 0 then

    o = [];

    c_out = 0

  else				

    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);

    (s_n, c_out) = fulladder(a[0], b[0], c_n1);

    o = s_n . s_n1

  end if

end where



subtracter<n>(a:[n], b:[n]) = (o:[n], c_out) where 

  

  an = not_n<n>(a);

  (o, c) = adder<n>(an, b, 1) ;

  c_out = c and 1

end where

  



check_zero<n>(w:[n]) = (b) where

  b = (w[0] and 0) and check_zero<n-1>(w[1..])

end where









cH(R3, Rd3, Rr3) = (H) where	

  H = (Rd3 and Rr3) or (Rr3 and (not R3)) or ((not R3 and Rd3))

end where





cS(N, V) = (S) where		

  S = N xor V

end where



cV(R7, Rd7, Rr7) = (V) where	

  V = ((Rd7 and Rr7) and (not R7) ) or ((not Rd7) and (not Rr7)) and R7

end where



cV2(R:[word]) = (V) where

  V = R[7] and ((not R[6]) and ((not R[5]) and ((not R[4]) and ((not R[3]) and ((not R[2]) and ((not R[1]) and ((not R[0]))))))))

end where



cV3(R:[word]) = (V) where

  V = (not R[7]) and R[6] and R[5] and R[4] and R[3] and R[2] and R[1] and R[0]

end where



cZ(R:[word]) = (Z) where		

  Z = check_zero<word>(R)

end where





cC(R7, Rd7, Rr7) = (C) where	

  C = (Rd7 and Rr7) or (Rr7 and (not R7)) or ((not R7) and Rd7)

end where





getI(S:[word]) = (I) where

  I = S[7]

end where



getT(S:[word]) = (T) where

  T = S[6]

end where



getH(S:[word]) = (H) where

  H = S[5]

end where



getS(S:[word]) = (s) where

  s = S[4]

end where



getV(S:[word]) = (V) where

  V = S[3]

end where



getN(S:[word]) = (N) where

  N = S[2]

end where



getZ(S:[word]) = (Z) where

  Z = S[1]

end where



getC(S:[word]) = (C) where

  C = S[0]

end where



setStatus(S0, S1, S2, S3, S4, S5, S6, S7) = (S:[word]) where

  S = S0.S1.S2.S3.S4.S5.S6.S7

end where



add(r:[reg_addr], d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  (R, c) = adder<word>(Rd, Rr, 0);



  S7 = S[7];

  S6 = S[6];

  S5 = cH(R[3], Rd[3], Rr[3]);

  S3 = cV(R[7], Rd[7], Rr[7]);

  S4 = cS(S2, S3);

  S2 = R[7];

  S1 = cZ(R);

  S0 = cC(R[7], Rd[7], Rr[7]);



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



adc(r:[reg_addr], d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  c = getC(S);

  (R, c) = adder<word>(Rd, Rr, c);



  S7 = S[7];

  S6 = S[6];

  S5 = cH(R[3], Rd[3], Rr[3]);	

  S4 = cS(S2, S3);	

  S3 = cV(R[7], Rd[7], Rr[7]); 

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = cC(R[7], Rd[7], Rr[7]);	



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;



end where



and_n<n>(a:[n], b:[n]) = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = (a[0] and b[0]) . (and_n<n-1>(a[1..], b[1..]))

  end if

end where



and_op(d:[reg_addr], r:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = and_n<word>(Rd, Rr);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5] ;			

  S3 = 0;			

  S4 = cS(S2, S3);

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0]; 			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



andi(d:[reg_addr], K:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = and_n<word>(Rd, K);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5]; 			

  S3 = 0;			

  S4 = cS(S2, S3);

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



or_n<n>(a:[n], b:[n]) = (o:[n]) where

  if n = 0 then

    o = []

  else

    a0 = a[0];

    b0 = b[0];

    o = (a0 or b0) . (or_n<n-1>(a[1..], b[1..]))

  end if

end where



or_op(d:[reg_addr], r:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = or_n<word>(Rd, Rr);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5]; 			

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



ori(d:[reg_addr], K:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = or_n<word>(Rd, K);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



xor_n<n>(a:[n], b:[n]) = (o:[n]) where

  if n = 0 then

    o=[]

  else

    a0 = a[0];

    b0 = b[0];

    o = (a0 xor b0) . xor_n<n-1>(a[1..], b[1..])

  end if

end where



eor(d:[reg_addr], r:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = xor_n<word>(Rd, Rr);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];			

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



com_n<n>(a:[n]) = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = (a[0] & 0).com_n<n-1>(a[1..])

  end if

end where



com(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  R = com_n<word>(Rd);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = 1;			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where					



sbr(d:[reg_addr], K:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ori(d, K, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



cbr(d:[reg_addr], K:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  a = com_n<word>(K);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = andi(d, a, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



inc(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  o = one<word>();



  R = increase<word>(R);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);		

  S3 = cV2(R);			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



tst(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  R = and_n<word>(Rd, Rd);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0]; 			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = and_op(d, d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)



end where



clr(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S7 = S[7]; 			

  S6 = S[6];			

  S5 = S[5];			

  S4 = 0;			

  S3 = 0;			

  S2 = 0;			

  S1 = 1;			

  S0 = S[0]; 			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = eor(d, d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



ser(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  o = allone<word>();

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, o, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

  S = S;

end where



sub(r:[reg_addr], d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  (R, c) = subtracter<word>(Rd, Rr);



  S7 = S[7];

  S6 = S[6];

  S5 = cH(not R[3], not Rd[3], Rr[3]);	

  S4 = cS(S2, S3);		

  S3 = cV(R[7], Rd[7], not Rr[7]); 

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = cC(not R[7], not Rd[7], Rr[7]); 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



subi(d:[4], K:[8], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(1.d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  

  (R, c) = subtracter<word>(Rd, K);



  S7 = S[7];			

  S6 = S[6];			

  S5 = cH(not R[3], not Rd[3], K[3]);	

  S4 = cS(S2, S3);		

  S3 = cV(R[7], Rd[7], not K[7]); 

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = cC(not R[7], not Rd[7], K[7]); 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(1.d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



sbc(d:[4], K:[8], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where 

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  PC = PC;

  SP = SP

end where



sbci(d:[4], K:[8], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where 

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  PC = PC;

  SP = SP

end where



neg(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  zero = zero<word>();



  (R, c) = subtracter<word>(zero, Rd);



  S7 = S[7];			

  S6 = S[6];			

  S5 = R[3] or Rd[3];		

  S4 = cS(S2, S3);      		

  S3 = cV2(R);			

  S2 = R[7]; 			

  S1 = cZ(R);			

  S0 = R[7] or R[6] or R[5] or R[4] or R[3] or R[2] or R[1] or R[0]; 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



dec(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  one = one<word>();



  (R, c) = subtracter<word>(one, Rd);

  

  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);      		

  S3 = cV3(R);			

  S2 = R[7]; 			

  S1 = cZ(R);			

  S0 = S[0];



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where

not_n<n>(a:[n]) = (b:[n]) where

  if n = 0 then

    b = []

  else

    b = (not a[0]).not_n<n-1>(a[1..]);

  end if

end where



fulladder(a,b,c) = (s, r) where

    s = (a xor b) xor c;

    r = (a and b) + ((a xor b) and c) ;

end where



adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where

  if n = 0 then

    o = [];

    c_out = 0

  else				

    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);

    (s_n, c_out) = fulladder(a[0], b[0], c_n1);

    o = s_n . s_n1

  end if

end where



subtracter<n>(a:[n], b:[n]) = (o:[n], c_out) where 

  

  an = not_n<n>(a);

  (o, c) = adder<n>(an, b, 1) ;

  c_out = c and 1

end where

  





regs_identity(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  regs16 = regs16;

  regs17 = regs17;

  regs18 = regs18;

  regs19 = regs19;

  regs20 = regs20;

  regs21 = regs21;

  regs22 = regs22;

  regs23 = regs23;

  regs24 = regs24;

  regs25 = regs25;

  regs26 = regs26;

  regs27 = regs27;

  regs28 = regs28;

  regs29 = regs29;

  regs30 = regs30;

  regs31 = regs31;

end where



allone<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = 1.allone<n-1>()

  end if

end where



zero<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = 0.allone<n-1>()

  end if

end where



one<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else if n = 1 then

    o = 1

  else

    o = 0.one<n-1>()

  end if

  end if

end where



init_register(z, SP_init:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  regs16 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs17 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs18 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs19 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs20 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs21 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs22 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs23 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs24 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs25 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs26 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs27 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs28 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs29 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs30 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs31 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  z2 = zero<word>();

  S = z2;

  PC = z2.z2;

  SP = SP_init;

end where



op_decomposer(opcode:[instr_size]) = (op0, op1, op2, op3, op4, op5, op6, op7, op8, op9, op10, op11, op12, op13, op14, op15) where

  op0 = opcode[0];

  op1 = opcode[1];

  op2 = opcode[2];

  op3 = opcode[3];

  op4 = opcode[4];

  op5 = opcode[5];

  op6 = opcode[6];

  op7 = opcode[7];

  op8 = opcode[8];

  op9 = opcode[9];

  op10 = opcode[10];

  op11 = opcode[11];

  op12 = opcode[12];

  op13 = opcode[13];

  op14 = opcode[14];

  op15 = opcode[15];

end where



pusher(r0, r1, r2, r3, r4, w:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

    if r1 = O then

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

	    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs16 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs17 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs18 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs19 = w ;

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs20 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs21 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs22 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs23 = w ;

          end if 

        end if 

      end if 

    else

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs24 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs25 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs26 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs27 = w ;

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs28 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs29 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs30 = w

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs31 = w

          end if 

        end if 

      end if 

    end if 

end where



push_register(d:[reg_addr], w:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  d0 = d[0];

  d1 = d[1];

  d2 = d[2];

  d3 = d[3];

  d4 = d[4];



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = pusher(d0, d1, d2, d3, d4, w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31)

end where



poper(r0, r1, r2, r3, r4, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (w:[word]) where

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

    if r1 = O then

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            w = regs16

          else

            w = regs17

          end if 

        else

          if r4 = 0 then

            w = regs18

          else

            w = regs19

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            w = regs20

          else

            w = regs21

          end if 

        else

          if r4 = 0 then

            w = regs22

          else

            w = regs23

          end if 

        end if 

      end if 

    else

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            w = regs24

          else

            w = regs25

          end if 

        else

          if r4 = 0 then

            w = regs26

          else

            w = regs27

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            w = regs28

          else

            w = regs29

          end if 

        else

          if r4 = 0 then

            w = regs30

          else

            w = regs31

          end if 

        end if 

      end if 

    end if 

  

end where



pop_register(raddr:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (w:[word]) where

  r0 = raddr[0];

  r1 = raddr[1];

  r2 = raddr[2];

  r3 = raddr[3];

  r4 = raddr[4];



  w = poper(r0, r1, r2, r3, r4, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31)

end where



increase<n>(R:[n]) = (R:[n]) where	

  o = one<n>();

  (R, c) = adder<n>(R, o, 0);

 

end where



iincrease<n>(R:[n]) = (R:[n]) where	

  two = one<n-1>().0;

  (R, c) = adder<n>(R, two, 0);

end where



decrease<n>(R:[n]) = (R:[n]) where 	

  o = one<n>();

  (R, c) = subtracter<n>(R, o);

end where



getBit(wire:[word], s0, s1, s2) = (r) where

  if s0 = 0 then

    if s1 = 0 then

      if s2 = 0 then		

        r = wire[0]

      else 			

        r = wire[1]

      end if

    else

      if s2 = 0 then		

        r = wire[2]

      else 			

        r = wire[3]

      end if

    end if

  else

    if s1 = 0 then

      if s2 = 0 then		

        r = wire[4]

      else 			

        r = wire[5]

      end if

    else

      if s2 = 0 then		

        r = wire[6]

      else 			

        r = wire[7]

      end if

    end if

  end if

end where





push_stack(SP:[ram_addr_size], w:[word]) = (SP:[ram_addr_size]) where

  

  o = ram<ram_addr_size, word>(SP, 1, SP, w);



  

  SP = decrease<ram_addr_size>(SP);



end where



pop_stack(SP:[ram_addr_size]) = (SP:[ram_addr_size], o:[word]) where

  

  o = ram<ram_addr_size, word>(SP, 0, SP, zero<word>());



  SP = increase<ram_addr_size>(SP);

end where
not_n<n>(a:[n]) = (b:[n]) where

  if n = 0 then

    b = []

  else

    b = (not a[0]).not_n<n-1>(a[1..]);

  end if

end where



fulladder(a,b,c) = (s, r) where

    s = (a xor b) xor c;

    r = (a and b) + ((a xor b) and c) ;

end where



adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where

  if n = 0 then

    o = [];

    c_out = 0

  else				

    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);

    (s_n, c_out) = fulladder(a[0], b[0], c_n1);

    o = s_n . s_n1

  end if

end where



subtracter<n>(a:[n], b:[n]) = (o:[n], c_out) where 

  

  an = not_n<n>(a);

  (o, c) = adder<n>(an, b, 1) ;

  c_out = c and 1

end where

  



not_n<n>(a:[n]) = (b:[n]) where

  if n = 0 then

    b = []

  else

    b = (not a[0]).not_n<n-1>(a[1..]);

  end if

end where



fulladder(a,b,c) = (s, r) where

    s = (a xor b) xor c;

    r = (a and b) + ((a xor b) and c) ;

end where



adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where

  if n = 0 then

    o = [];

    c_out = 0

  else				

    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);

    (s_n, c_out) = fulladder(a[0], b[0], c_n1);

    o = s_n . s_n1

  end if

end where



subtracter<n>(a:[n], b:[n]) = (o:[n], c_out) where 

  

  an = not_n<n>(a);

  (o, c) = adder<n>(an, b, 1) ;

  c_out = c and 1

end where

  





regs_identity(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  regs16 = regs16;

  regs17 = regs17;

  regs18 = regs18;

  regs19 = regs19;

  regs20 = regs20;

  regs21 = regs21;

  regs22 = regs22;

  regs23 = regs23;

  regs24 = regs24;

  regs25 = regs25;

  regs26 = regs26;

  regs27 = regs27;

  regs28 = regs28;

  regs29 = regs29;

  regs30 = regs30;

  regs31 = regs31;

end where



allone<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = 1.allone<n-1>()

  end if

end where



zero<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = 0.allone<n-1>()

  end if

end where



one<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else if n = 1 then

    o = 1

  else

    o = 0.one<n-1>()

  end if

  end if

end where



init_register(z, SP_init:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  regs16 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs17 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs18 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs19 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs20 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs21 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs22 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs23 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs24 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs25 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs26 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs27 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs28 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs29 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs30 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs31 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  z2 = zero<word>();

  S = z2;

  PC = z2.z2;

  SP = SP_init;

end where



op_decomposer(opcode:[instr_size]) = (op0, op1, op2, op3, op4, op5, op6, op7, op8, op9, op10, op11, op12, op13, op14, op15) where

  op0 = opcode[0];

  op1 = opcode[1];

  op2 = opcode[2];

  op3 = opcode[3];

  op4 = opcode[4];

  op5 = opcode[5];

  op6 = opcode[6];

  op7 = opcode[7];

  op8 = opcode[8];

  op9 = opcode[9];

  op10 = opcode[10];

  op11 = opcode[11];

  op12 = opcode[12];

  op13 = opcode[13];

  op14 = opcode[14];

  op15 = opcode[15];

end where



pusher(r0, r1, r2, r3, r4, w:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

    if r1 = O then

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

	    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs16 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs17 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs18 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs19 = w ;

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs20 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs21 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs22 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs23 = w ;

          end if 

        end if 

      end if 

    else

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs24 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs25 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs26 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs27 = w ;

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs28 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs29 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs30 = w

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs31 = w

          end if 

        end if 

      end if 

    end if 

end where



push_register(d:[reg_addr], w:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  d0 = d[0];

  d1 = d[1];

  d2 = d[2];

  d3 = d[3];

  d4 = d[4];



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = pusher(d0, d1, d2, d3, d4, w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31)

end where



poper(r0, r1, r2, r3, r4, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (w:[word]) where

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

    if r1 = O then

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            w = regs16

          else

            w = regs17

          end if 

        else

          if r4 = 0 then

            w = regs18

          else

            w = regs19

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            w = regs20

          else

            w = regs21

          end if 

        else

          if r4 = 0 then

            w = regs22

          else

            w = regs23

          end if 

        end if 

      end if 

    else

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            w = regs24

          else

            w = regs25

          end if 

        else

          if r4 = 0 then

            w = regs26

          else

            w = regs27

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            w = regs28

          else

            w = regs29

          end if 

        else

          if r4 = 0 then

            w = regs30

          else

            w = regs31

          end if 

        end if 

      end if 

    end if 

  

end where



pop_register(raddr:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (w:[word]) where

  r0 = raddr[0];

  r1 = raddr[1];

  r2 = raddr[2];

  r3 = raddr[3];

  r4 = raddr[4];



  w = poper(r0, r1, r2, r3, r4, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31)

end where



increase<n>(R:[n]) = (R:[n]) where	

  o = one<n>();

  (R, c) = adder<n>(R, o, 0);

 

end where



iincrease<n>(R:[n]) = (R:[n]) where	

  two = one<n-1>().0;

  (R, c) = adder<n>(R, two, 0);

end where



decrease<n>(R:[n]) = (R:[n]) where 	

  o = one<n>();

  (R, c) = subtracter<n>(R, o);

end where



getBit(wire:[word], s0, s1, s2) = (r) where

  if s0 = 0 then

    if s1 = 0 then

      if s2 = 0 then		

        r = wire[0]

      else 			

        r = wire[1]

      end if

    else

      if s2 = 0 then		

        r = wire[2]

      else 			

        r = wire[3]

      end if

    end if

  else

    if s1 = 0 then

      if s2 = 0 then		

        r = wire[4]

      else 			

        r = wire[5]

      end if

    else

      if s2 = 0 then		

        r = wire[6]

      else 			

        r = wire[7]

      end if

    end if

  end if

end where





push_stack(SP:[ram_addr_size], w:[word]) = (SP:[ram_addr_size]) where

  

  o = ram<ram_addr_size, word>(SP, 1, SP, w);



  

  SP = decrease<ram_addr_size>(SP);



end where



pop_stack(SP:[ram_addr_size]) = (SP:[ram_addr_size], o:[word]) where

  

  o = ram<ram_addr_size, word>(SP, 0, SP, zero<word>());



  SP = increase<ram_addr_size>(SP);

end where
not_n<n>(a:[n]) = (b:[n]) where

  if n = 0 then

    b = []

  else

    b = (not a[0]).not_n<n-1>(a[1..]);

  end if

end where



fulladder(a,b,c) = (s, r) where

    s = (a xor b) xor c;

    r = (a and b) + ((a xor b) and c) ;

end where



adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where

  if n = 0 then

    o = [];

    c_out = 0

  else				

    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);

    (s_n, c_out) = fulladder(a[0], b[0], c_n1);

    o = s_n . s_n1

  end if

end where



subtracter<n>(a:[n], b:[n]) = (o:[n], c_out) where 

  

  an = not_n<n>(a);

  (o, c) = adder<n>(an, b, 1) ;

  c_out = c and 1

end where

  



check_zero<n>(w:[n]) = (b) where

  b = (w[0] and 0) and check_zero<n-1>(w[1..])

end where









cH(R3, Rd3, Rr3) = (H) where	

  H = (Rd3 and Rr3) or (Rr3 and (not R3)) or ((not R3 and Rd3))

end where





cS(N, V) = (S) where		

  S = N xor V

end where



cV(R7, Rd7, Rr7) = (V) where	

  V = ((Rd7 and Rr7) and (not R7) ) or ((not Rd7) and (not Rr7)) and R7

end where



cV2(R:[word]) = (V) where

  V = R[7] and ((not R[6]) and ((not R[5]) and ((not R[4]) and ((not R[3]) and ((not R[2]) and ((not R[1]) and ((not R[0]))))))))

end where



cV3(R:[word]) = (V) where

  V = (not R[7]) and R[6] and R[5] and R[4] and R[3] and R[2] and R[1] and R[0]

end where



cZ(R:[word]) = (Z) where		

  Z = check_zero<word>(R)

end where





cC(R7, Rd7, Rr7) = (C) where	

  C = (Rd7 and Rr7) or (Rr7 and (not R7)) or ((not R7) and Rd7)

end where





getI(S:[word]) = (I) where

  I = S[7]

end where



getT(S:[word]) = (T) where

  T = S[6]

end where



getH(S:[word]) = (H) where

  H = S[5]

end where



getS(S:[word]) = (s) where

  s = S[4]

end where



getV(S:[word]) = (V) where

  V = S[3]

end where



getN(S:[word]) = (N) where

  N = S[2]

end where



getZ(S:[word]) = (Z) where

  Z = S[1]

end where



getC(S:[word]) = (C) where

  C = S[0]

end where



setStatus(S0, S1, S2, S3, S4, S5, S6, S7) = (S:[word]) where

  S = S0.S1.S2.S3.S4.S5.S6.S7

end where



add(r:[reg_addr], d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  (R, c) = adder<word>(Rd, Rr, 0);



  S7 = S[7];

  S6 = S[6];

  S5 = cH(R[3], Rd[3], Rr[3]);

  S3 = cV(R[7], Rd[7], Rr[7]);

  S4 = cS(S2, S3);

  S2 = R[7];

  S1 = cZ(R);

  S0 = cC(R[7], Rd[7], Rr[7]);



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



adc(r:[reg_addr], d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  c = getC(S);

  (R, c) = adder<word>(Rd, Rr, c);



  S7 = S[7];

  S6 = S[6];

  S5 = cH(R[3], Rd[3], Rr[3]);	

  S4 = cS(S2, S3);	

  S3 = cV(R[7], Rd[7], Rr[7]); 

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = cC(R[7], Rd[7], Rr[7]);	



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;



end where



and_n<n>(a:[n], b:[n]) = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = (a[0] and b[0]) . (and_n<n-1>(a[1..], b[1..]))

  end if

end where



and_op(d:[reg_addr], r:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = and_n<word>(Rd, Rr);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5] ;			

  S3 = 0;			

  S4 = cS(S2, S3);

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0]; 			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



andi(d:[reg_addr], K:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = and_n<word>(Rd, K);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5]; 			

  S3 = 0;			

  S4 = cS(S2, S3);

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



or_n<n>(a:[n], b:[n]) = (o:[n]) where

  if n = 0 then

    o = []

  else

    a0 = a[0];

    b0 = b[0];

    o = (a0 or b0) . (or_n<n-1>(a[1..], b[1..]))

  end if

end where



or_op(d:[reg_addr], r:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = or_n<word>(Rd, Rr);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5]; 			

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



ori(d:[reg_addr], K:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = or_n<word>(Rd, K);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



xor_n<n>(a:[n], b:[n]) = (o:[n]) where

  if n = 0 then

    o=[]

  else

    a0 = a[0];

    b0 = b[0];

    o = (a0 xor b0) . xor_n<n-1>(a[1..], b[1..])

  end if

end where



eor(d:[reg_addr], r:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  R = xor_n<word>(Rd, Rr);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];			

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



com_n<n>(a:[n]) = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = (a[0] & 0).com_n<n-1>(a[1..])

  end if

end where



com(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  R = com_n<word>(Rd);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = 1;			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where					



sbr(d:[reg_addr], K:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ori(d, K, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



cbr(d:[reg_addr], K:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  a = com_n<word>(K);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = andi(d, a, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



inc(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  o = one<word>();



  R = increase<word>(R);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);		

  S3 = cV2(R);			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0];			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



tst(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  R = and_n<word>(Rd, Rd);



  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);		

  S3 = 0;			

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = S[0]; 			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = and_op(d, d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)



end where



clr(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S7 = S[7]; 			

  S6 = S[6];			

  S5 = S[5];			

  S4 = 0;			

  S3 = 0;			

  S2 = 0;			

  S1 = 1;			

  S0 = S[0]; 			



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = eor(d, d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



ser(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  o = allone<word>();

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, o, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

  S = S;

end where



sub(r:[reg_addr], d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  (R, c) = subtracter<word>(Rd, Rr);



  S7 = S[7];

  S6 = S[6];

  S5 = cH(not R[3], not Rd[3], Rr[3]);	

  S4 = cS(S2, S3);		

  S3 = cV(R[7], Rd[7], not Rr[7]); 

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = cC(not R[7], not Rd[7], Rr[7]); 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



subi(d:[4], K:[8], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(1.d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  

  (R, c) = subtracter<word>(Rd, K);



  S7 = S[7];			

  S6 = S[6];			

  S5 = cH(not R[3], not Rd[3], K[3]);	

  S4 = cS(S2, S3);		

  S3 = cV(R[7], Rd[7], not K[7]); 

  S2 = R[7];			

  S1 = cZ(R);			

  S0 = cC(not R[7], not Rd[7], K[7]); 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(1.d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



sbc(d:[4], K:[8], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where 

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  PC = PC;

  SP = SP

end where



sbci(d:[4], K:[8], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where 

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  PC = PC;

  SP = SP

end where



neg(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  zero = zero<word>();



  (R, c) = subtracter<word>(zero, Rd);



  S7 = S[7];			

  S6 = S[6];			

  S5 = R[3] or Rd[3];		

  S4 = cS(S2, S3);      		

  S3 = cV2(R);			

  S2 = R[7]; 			

  S1 = cZ(R);			

  S0 = R[7] or R[6] or R[5] or R[4] or R[3] or R[2] or R[1] or R[0]; 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



dec(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  one = one<word>();



  (R, c) = subtracter<word>(one, Rd);

  

  S7 = S[7];

  S6 = S[6];

  S5 = S[5];

  S4 = cS(S2, S3);      		

  S3 = cV3(R);			

  S2 = R[7]; 			

  S1 = cZ(R);			

  S0 = S[0];



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, R, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



lsl(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = add(d, d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)



end where



lsr(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  w1 = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  a = (w1[wordm1]);

  w = 0. w1[0..(wordm2)];





  S7 = S[7]; 

  S6 = S[6]; 

  S5 = S[5]; 

  S4 = cS(S2, S3); 

  S3 = not a; 

  S2 = 0; 

  S1 = cZ(w); 

  S0 = a; 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



rol(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  w1 = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  c = S[0];

  w = w1[1..].c;



  S7 = S[7]; 

  S6 = S[6]; 

  S5 = w1[4]; 

  S4 = cS(S2, S3); 

  S3 = w[0] xor w1[0]; 

  S2 = w[0]; 

  S1 = cZ(w); 

  S0 = w1[0]; 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



ror(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  w1 = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  c = S[0];

  w = c.w1[0..(wordm2)];



  S7 = S[7]; 

  S6 = S[6]; 

  S5 = S[5]; 

  S4 = cS(S2, S3); 

  S3 = w[0] xor w1[7]; 

  S2 = w[0]; 

  S1 = cZ(w); 

  S0 = w1[7]; 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



asr(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  w1 = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  w = w1[0].w1[0..(wordm2)];



  S7 = S[7]; 

  S6 = S[6]; 

  S5 = S[5]; 

  S4 = cS(S2, S3); 

  S3 = w[0] xor w1[7]; 

  S2 = w[0]; 

  S1 = cZ(w); 

  S0 = w1[7]; 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



swap(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  w1 = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  w = w1[4].w1[5].w1[6].w1[7].w1[0].w1[1].w1[2].w1[3];



  S7 = S[7]; 

  S6 = S[6]; 

  S5 = S[5]; 

  S4 = S[4]; 

  S3 = S[3]; 

  S2 = S[2]; 

  S1 = S[1]; 

  S0 = S[0]; 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);

 



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d,w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



bset_brancher_setter(S0, S1, S2, S3, S4, S5, S6, S7) = (S0, S1, S2, S3, S4, S5, S6, S7) where

  S0 = S0;

  S1 = S1;

  S2 = S2;

  S3 = S3;

  S4 = S4;

  S5 = S5;

  S6 = S6;

  S7 = S7;

end where



bset_brancher(v, s0, s1, s2, S0, S1, S2, S3, S4, S5, S6, S7) = (S0, S1, S2, S3, S4, S5, S6, S7) where

  if s0 = 0 then

    if s1 = 0 then

      if s2 = 0 then		

        (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher_setter(S0, S1, S2, S3, S4, S5, S6, S7);        

        S0 = v

      else 			

        (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher_setter(S0, S1, S2, S3, S4, S5, S6, S7);

        S1 = v

      end if

    else

      if s2 = 0 then		

        (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher_setter(S0, S1, S2, S3, S4, S5, S6, S7);

        S2 = v

      else 			

        (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher_setter(S0, S1, S2, S3, S4, S5, S6, S7);

        S3 = v

      end if

    end if

  else

    if s1 = 0 then

      if s2 = 0 then		

        (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher_setter(S0, S1, S2, S3, S4, S5, S6, S7);

        S4 = v

      else 			

        (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher_setter(S0, S1, S2, S3, S4, S5, S6, S7);

        S5 = v

      end if

    else

      if s2 = 0 then		

        (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher_setter(S0, S1, S2, S3, S4, S5, S6, S7);

        S6 = v

      else 			

        (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher_setter(S0, S1, S2, S3, S4, S5, S6, S7);

        S7 = v

      end if

    end if

  end if

end where



bset(s:[3], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where 

  (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher(0, s[0], s[1], s[2], S[0], S[1], S[2], S[3], S[4], S[5], S[6], S[7]);

  

  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



bclr(s:[3], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where 

  (S0, S1, S2, S3, S4, S5, S6, S7) = bset_brancher(1, s[0], s[1], s[2], S[0], S[1], S[2], S[3], S[4], S[5], S[6], S[7]);



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



sbi() = (caca) where 

  caca = 0

end where



cbi() = (caca) where 

  caca = 0

end where



bst_brancher(Rd:[word], b0, b1, b2) = (T) where

  if b0 = 0 then

    if b1 = 0 then

      if b2 = 0 then		

        T = Rd[0]

      else 			

        T = Rd[1]

      end if

    else

      if b2 = 0 then		

        T = Rd[2]

      else 			

        T = Rd[3]

      end if

    end if

  else

    if b1 = 0 then

      if b2 = 0 then		

        T = Rd[4]

      else 			

        T = Rd[5]

      end if

    else

      if b2 = 0 then		

        T = Rd[6]

      else 			

        T = Rd[7]

      end if

    end if

  end if

end where



bst(d:[reg_addr], b:[3], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where 

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  S7 = S[7]; 

  S6 = bst_brancher(Rd, b[0], b[1], b[2]); 

  S5 = S[5]; 

  S4 = S[4]; 

  S3 = S[3]; 

  S2 = S[2]; 

  S1 = S[1]; 

  S0 = S[0]; 



  S = setStatus(S0, S1, S2, S3, S4, S5, S6, S7);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



bld_brancher(Rd:[word], T, b0, b1, b2) = (Rd:[word]) where

  if b0 = 0 then

    if b1 = 0 then

      if b2 = 0 then		

        Rd = T.Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7]

      else 			

        Rd = Rd[1].T.Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7]

      end if

    else

      if b2 = 0 then		

        Rd = Rd[1].Rd[2].T.Rd[3].Rd[4].Rd[5].Rd[6].Rd[7]

      else 			

        Rd = Rd[1].Rd[2].Rd[3].T.Rd[4].Rd[5].Rd[6].Rd[7]

      end if

    end if

  else

    if b1 = 0 then

      if b2 = 0 then		

        Rd = Rd[1].Rd[2].Rd[3].Rd[4].T.Rd[5].Rd[6].Rd[7]

      else 			

        Rd = Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].T.Rd[6].Rd[7]

      end if

    else

      if b2 = 0 then		

        Rd = Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].T.Rd[7]

      else 			

        Rd = Rd[1].Rd[2].Rd[3].Rd[4].Rd[5].Rd[6].Rd[7].T

      end if

    end if

  end if

end where



bld(d:[reg_addr], b, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  Rd = bld_brancher(Rd, getT(S), b[0], b[1], b[2]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, Rd, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);  

  S = S;

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



sec(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(1, S[1], S[2], S[3], S[4], S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



clc(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(0, S[1], S[2], S[3], S[4], S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



sen(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], 1, S[3], S[4], S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



cln(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], 0, S[3], S[4], S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



sez(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], 1, S[2], S[3], S[4], S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



clz(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

   S = setStatus(S[0], 0, S[2], S[3], S[4], S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



sei(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], S[2], S[3], S[4], S[5], S[6], 1);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



cli(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], S[2], S[3], S[4], S[5], S[6], 0);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



ses(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], S[2], S[3], 1, S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



cls(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], S[2], S[3], 0, S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



sev(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], S[2], 1, S[4], S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



clv(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], S[2], 0, S[4], S[5], S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



set(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], S[2], S[3], S[4], S[5], 1, S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



clt(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

    S = setStatus(S[0], S[1], S[2], S[3], S[4], S[5], 0, S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



seh(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], S[2], S[3], S[4], 1, S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where



clh(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  S = setStatus(S[0], S[1], S[2], S[3], S[4], 0, S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

end where

rjmp(k:[12], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (PC, c) = adder<word+word>(PC, 0.0.0.0.k, 1);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  SP = SP;

end where



ijmp(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Z = regs31.regs30;



  (PC, c) = adder<word+word>(PC, Z, 0);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  SP = SP;

end where



rcall(k:[12], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  

  PCtmp = increase<ram_addr_size>(PC);

  SP0 = push_stack(SP, PCtmp[..7]);

  SP = push_stack(SP0, PCtmp[8..]);



  (PC, c) = adder<word+word>(PC, 0.0.0.0.k, 1); 

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

end where



icall(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where  

  PC = regs31.regs30;



  

  PCtmp = increase<ram_addr_size>(PC);

  SP0 = push_stack(SP, PCtmp[..7]);

  SP = push_stack(SP0, PCtmp[8..]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

end where



ret(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  

  (SP0, PC815) = pop_stack(SP);

  (SP, PC07) = pop_stack(SP0);



  PC = PC815.PC07;



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

end where



reti(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  two = one<word+word-1>().0;



  

  (SP0, PC815) = pop_stack(SP);

  (SP, PC07) = pop_stack(SP0);



  PC = PC815.PC07;



  S = setStatus(S[0], S[1], S[2], S[3], S[4], S[5], S[6], 1);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

end where



cpse_brancher(Rd:[word], Rr:[word]) = (PC:[ram_addr_size]) where

  if Rd = Rr then

    PC = iincrease<ram_addr_size>(PC);		

  else

    PC = increase<ram_addr_size>(PC);		

  end if

end where



cpse(r:[5], d:[5], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  PC = cpse_brancher(Rd, Rr);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  SP = SP;

end where



cp(r:[reg_addr], d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rd = pop_register(d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  (R, c) = subtracter<word>(Rr, Rd);

  

  S5 = cH(R[3], (not Rd[3]), Rr[3]);

  S4 = cS(S2, S3);

  S3 = cV((not R[7]), Rd[7], (not Rr[7]));

  S2 = R[7];

  S1 = cZ(R);

  S0 = cC(R[7], (not Rd[7]), Rr[7]);



  S = setStatus(S0, S1, S2, S3, S4, S5, S[6], S[7]);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  PC = increase<ram_addr_size>(PC);

end where



cpc(r:[reg_addr], d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where 

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  PC = PC;

  SP = SP



















  



end where



cpi(d:[reg_addr-1], K:[8], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  Rd = pop_register(1.d, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  (R, c) = subtracter<word>(K, Rd);



  S5 = cH(R[3], (not Rd[3]), K[3]);

  S4 = cS(S2, S3);

  S3 = cV((not R[7]), Rd[7], (not K[7]));

  S2 = R[7];

  S1 = cZ(R);

  S0 = cC(R[7], (not Rd[7]), K[7]);



  S = setStatus(S0, S1, S2, S3, S4, S5, S[6], S[7]);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  PC = increase<ram_addr_size>(PC);

end where



sbr_comparator(r, PC:[ram_addr_size], v) = (PC:[ram_addr_size]) where

  if r = v then

    PC = iincrease<ram_addr_size>(PC)

  else

    PC = increase<ram_addr_size>(PC)

  end if

end where



sbrc(r:[reg_addr], b:[3], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  

  r2 = getBit(Rr, b[0], b[1], b[2]);

  

  PC = sbr_comparator(r2, PC, 0);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  S = S;

end where



sbrs(r:[reg_addr], b:[3], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  r2 = getBit(Rr, b[0], b[1], b[2]);

 

  PC = sbr_comparator(r2, PC, 1);

 (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  S = S;

end where















brb_annex(PC:[word+word], k:[7], cond, val) = (PC:[word+word]) where

  if cond = val then

    

    k16 = k[0].0.0.0.0.0.0.0.0.k[1].k[2].k[3].k[4].k[5];

    (PC, c) = adder<word+word>(PC, k16, 1); 

  else

    PC = increase<ram_addr_size>(PC);

  end if

end where



brbs(k:[7], s:[3], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  r = getBit(S, s[0], s[1], s[2]);

  PC = brb_annex(PC, k, r, 1);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  S = S;

end where



brbc(k:[7], s:[3], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  r = getBit(S, s[0], s[1], s[2]);

  PC = brb_annex(PC, k, r, 0);



 (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  S = S;

end where



breq(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbs(k, 0.0.1, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)



end where



brne(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbc(k, 0.0.1, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)



end where



brcs(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbs(k, 0.0.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)



end where



brcc(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbc(k, 0.0.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)



end where



brsh(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbc(k, 0.0.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brlo(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbs(k, 0.0.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brmi(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbs(k, 0.1.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brpl(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbc(k, 0.1.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brge(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbc(k, 1.0.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brlt(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbs(k, 1.0.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brhs(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbs(k, 1.0.1, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brhc(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbc(k, 1.0.1, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brts(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbs(k, 1.1.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brtc(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbc(k, 1.1.0, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brvs(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbs(k, 0.1.1, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brvc(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbc(k, 0.1.1, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brie(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbs(k, 1.1.1, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



brid(k:[7], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brbc(k, 1.1.1, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where

not_n<n>(a:[n]) = (b:[n]) where

  if n = 0 then

    b = []

  else

    b = (not a[0]).not_n<n-1>(a[1..]);

  end if

end where



fulladder(a,b,c) = (s, r) where

    s = (a xor b) xor c;

    r = (a and b) + ((a xor b) and c) ;

end where



adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where

  if n = 0 then

    o = [];

    c_out = 0

  else				

    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);

    (s_n, c_out) = fulladder(a[0], b[0], c_n1);

    o = s_n . s_n1

  end if

end where



subtracter<n>(a:[n], b:[n]) = (o:[n], c_out) where 

  

  an = not_n<n>(a);

  (o, c) = adder<n>(an, b, 1) ;

  c_out = c and 1

end where

  



break(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  

  PC = increase<ram_addr_size>(PC);

 (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  S = S;

end where



nop(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

 PC = increase<ram_addr_size>(PC);

 (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  S = S;

end where



sleep(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  

  PC = increase<ram_addr_size>(PC);

 (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  S = S;

end where



wdr(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  

  PC = increase<ram_addr_size>(PC);

 (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  S = S;

end where

not_n<n>(a:[n]) = (b:[n]) where

  if n = 0 then

    b = []

  else

    b = (not a[0]).not_n<n-1>(a[1..]);

  end if

end where



fulladder(a,b,c) = (s, r) where

    s = (a xor b) xor c;

    r = (a and b) + ((a xor b) and c) ;

end where



adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where

  if n = 0 then

    o = [];

    c_out = 0

  else				

    (s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);

    (s_n, c_out) = fulladder(a[0], b[0], c_n1);

    o = s_n . s_n1

  end if

end where



subtracter<n>(a:[n], b:[n]) = (o:[n], c_out) where 

  

  an = not_n<n>(a);

  (o, c) = adder<n>(an, b, 1) ;

  c_out = c and 1

end where

  





regs_identity(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  regs16 = regs16;

  regs17 = regs17;

  regs18 = regs18;

  regs19 = regs19;

  regs20 = regs20;

  regs21 = regs21;

  regs22 = regs22;

  regs23 = regs23;

  regs24 = regs24;

  regs25 = regs25;

  regs26 = regs26;

  regs27 = regs27;

  regs28 = regs28;

  regs29 = regs29;

  regs30 = regs30;

  regs31 = regs31;

end where



allone<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = 1.allone<n-1>()

  end if

end where



zero<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else

    o = 0.allone<n-1>()

  end if

end where



one<n>() = (o:[n]) where

  if n = 0 then

    o = []

  else if n = 1 then

    o = 1

  else

    o = 0.one<n-1>()

  end if

  end if

end where



init_register(z, SP_init:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  regs16 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs17 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs18 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs19 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs20 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs21 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs22 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs23 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs24 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs25 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs26 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs27 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs28 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs29 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs30 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  regs31 = (reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z).(reg z);

  z2 = zero<word>();

  S = z2;

  PC = z2.z2;

  SP = SP_init;

end where



op_decomposer(opcode:[instr_size]) = (op0, op1, op2, op3, op4, op5, op6, op7, op8, op9, op10, op11, op12, op13, op14, op15) where

  op0 = opcode[0];

  op1 = opcode[1];

  op2 = opcode[2];

  op3 = opcode[3];

  op4 = opcode[4];

  op5 = opcode[5];

  op6 = opcode[6];

  op7 = opcode[7];

  op8 = opcode[8];

  op9 = opcode[9];

  op10 = opcode[10];

  op11 = opcode[11];

  op12 = opcode[12];

  op13 = opcode[13];

  op14 = opcode[14];

  op15 = opcode[15];

end where



pusher(r0, r1, r2, r3, r4, w:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

    if r1 = O then

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

	    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs16 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs17 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs18 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs19 = w ;

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs20 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs21 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs22 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs23 = w ;

          end if 

        end if 

      end if 

    else

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs24 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs25 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs26 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs27 = w ;

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs28 = w ;

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs29 = w ;

          end if 

        else

          if r4 = 0 then

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs30 = w

          else

            (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

            regs31 = w

          end if 

        end if 

      end if 

    end if 

end where



push_register(d:[reg_addr], w:[word], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) where

  d0 = d[0];

  d1 = d[1];

  d2 = d[2];

  d3 = d[3];

  d4 = d[4];



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = pusher(d0, d1, d2, d3, d4, w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31)

end where



poper(r0, r1, r2, r3, r4, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (w:[word]) where

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

    if r1 = O then

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            w = regs16

          else

            w = regs17

          end if 

        else

          if r4 = 0 then

            w = regs18

          else

            w = regs19

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            w = regs20

          else

            w = regs21

          end if 

        else

          if r4 = 0 then

            w = regs22

          else

            w = regs23

          end if 

        end if 

      end if 

    else

      if r2 = 0 then

        if r3 = 0 then

          if r4 = 0 then

            w = regs24

          else

            w = regs25

          end if 

        else

          if r4 = 0 then

            w = regs26

          else

            w = regs27

          end if 

        end if 

      else

        if r3 = 0 then

          if r4 = 0 then

            w = regs28

          else

            w = regs29

          end if 

        else

          if r4 = 0 then

            w = regs30

          else

            w = regs31

          end if 

        end if 

      end if 

    end if 

  

end where



pop_register(raddr:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word]) = (w:[word]) where

  r0 = raddr[0];

  r1 = raddr[1];

  r2 = raddr[2];

  r3 = raddr[3];

  r4 = raddr[4];



  w = poper(r0, r1, r2, r3, r4, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31)

end where



increase<n>(R:[n]) = (R:[n]) where	

  o = one<n>();

  (R, c) = adder<n>(R, o, 0);

 

end where



iincrease<n>(R:[n]) = (R:[n]) where	

  two = one<n-1>().0;

  (R, c) = adder<n>(R, two, 0);

end where



decrease<n>(R:[n]) = (R:[n]) where 	

  o = one<n>();

  (R, c) = subtracter<n>(R, o);

end where



getBit(wire:[word], s0, s1, s2) = (r) where

  if s0 = 0 then

    if s1 = 0 then

      if s2 = 0 then		

        r = wire[0]

      else 			

        r = wire[1]

      end if

    else

      if s2 = 0 then		

        r = wire[2]

      else 			

        r = wire[3]

      end if

    end if

  else

    if s1 = 0 then

      if s2 = 0 then		

        r = wire[4]

      else 			

        r = wire[5]

      end if

    else

      if s2 = 0 then		

        r = wire[6]

      else 			

        r = wire[7]

      end if

    end if

  end if

end where





push_stack(SP:[ram_addr_size], w:[word]) = (SP:[ram_addr_size]) where

  

  o = ram<ram_addr_size, word>(SP, 1, SP, w);



  

  SP = decrease<ram_addr_size>(SP);



end where



pop_stack(SP:[ram_addr_size]) = (SP:[ram_addr_size], o:[word]) where

  

  o = ram<ram_addr_size, word>(SP, 0, SP, zero<word>());



  SP = increase<ram_addr_size>(SP);

end where


ldd(d:[reg_addr], address:[ram_addr_size], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  z = zero<word>();

  out = ram<ram_addr_size, word>(address, 0, z.z, z);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, out, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

  S = S;

end where



ld(d:[reg_addr], o0, o1, o2, o3, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then 

    if o0 = 1 then 

      (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ldd(d, regs31.regs30, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP);

      z = zero<word>();

      (regs30, c1) = adder<word>(regs30, z, 1);

      (regs31, c2) = adder<word>(regs31, z, c1);

    else

      if o1 = 1 then 

        z = zero<word>();

    	o = one<word>();

	(regs30, c) = subtracter<word>(regs30, o);

  	carry = z[0..(word-1)].c;

  	(regs31, c2) = subtracter<word>(regs31, carry);

    	(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ldd(d, regs31.regs30, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ldd(d, regs31.regs30, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      end if

    end if

  else

    if o2 = 1 then 

      if o0 = 1 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ldd(d, regs27.regs26, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP);

        z = zero<word>();

        (regs26, c1) = adder<word>(regs26, z, 1);

        (regs27, c2) = adder<word>(regs27, z, c1);

      else

        if o1 = 1 then 

  	  z = zero<word>();

    	  o = one<word>();

	  (regs26, c) = subtracter<word>(regs26, o);

  	  carry = z[0..(word-1)].c;

  	  (regs27, c2) = subtracter<word>(regs27, carry);

    	  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ldd(d, regs27.regs26, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

        else 

          (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ldd(d, regs27.regs26, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

	end if

      end if

    else 

      if o0 = 1 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ldd(d, regs29.regs28, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP);

        z = zero<word>();

        (regs28, c1) = adder<word>(regs28, z, 1);

        (regs29, c2) = adder<word>(regs29, z, c1);

      else

        if o1 = 1 then 

  	  z = zero<word>();

    	  o = one<word>();

	  (regs28, c) = subtracter<word>(regs28, o);

  	  carry = z[0..(word-1)].c;

  	  (regs29, c2) = subtracter<word>(regs29, carry);

    	  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ldd(d, regs29.regs28, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

        else 

          (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = ldd(d, regs29.regs28, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

	end if

      end if

    end if

  end if

end where



lds(d:[reg_addr], k:[instr_size], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  w = ram<ram_addr_size, word>(k, 0, k, zero<word>());



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, w, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  SP = SP;

  S = S;  

  PC = iincrease<ram_addr_size>(PC)

  

end where



std(w:[word], address:[ram_addr_size], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  z = zero<word>();

  out = ram<ram_addr_size, word>(address, 1, address, w);



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  PC = increase<ram_addr_size>(PC);

  SP = SP;

  S = S;

end where



st_annex(w:[word], o0, o1, o2, o3, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then 

    if o0 = 1 then 

      (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = std(w, regs31.regs30, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP);

      z = zero<word>();

      (regs30, c1) = adder<word>(regs30, z, 1);

      (regs31, c2) = adder<word>(regs31, z, c1);

    else

      if o1 = 1 then 

        z = zero<word>();

    	o = one<word>();

	(regs30, c) = subtracter<word>(regs30, o);

  	carry = z[0..(word-1)].c;

  	(regs31, c2) = subtracter<word>(regs31, carry);

    	(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = std(w, regs31.regs30, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = std(w, regs31.regs30, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      end if

    end if

  else

    if o2 = 1 then 

      if o0 = 1 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = std(w, regs27.regs26, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP);

        z = zero<word>();

        (regs26, c1) = adder<word>(regs26, z, 1);

        (regs27, c2) = adder<word>(regs27, z, c1);

      else

        if o1 = 1 then 

  	  z = zero<word>();

    	  o = one<word>();

	  (regs26, c) = subtracter<word>(regs26, o);

  	  carry = z[0..(word-1)].c;

  	  (regs27, c2) = subtracter<word>(regs27, carry);

    	  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = std(w, regs27.regs26, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

        else 

          (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = std(w, regs27.regs26, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

	end if

      end if

    else 

      if o0 = 1 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = std(w, regs29.regs28, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP);

        z = zero<word>();

        (regs28, c1) = adder<word>(regs28, z, 1);

        (regs29, c2) = adder<word>(regs29, z, c1);

      else

        if o1 = 1 then 

  	  z = zero<word>();

    	  o = one<word>();

	  (regs28, c) = subtracter<word>(regs28, o);

  	  carry = z[0..(word-1)].c;

  	  (regs29, c2) = subtracter<word>(regs29, carry);

    	  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = std(w, regs29.regs28, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

        else 

          (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = std(w, regs29.regs28, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

	end if

      end if

    end if

  end if

end where



st(r:[reg_addr], o0, o1, o2, o3, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  w = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = st_annex(w, o0, o1, o2, o3, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP);

end where



sts(r:[reg_addr], k:[ram_addr_size], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  out = ram<ram_addr_size, word>(k, 1, k, Rr);



  PC = iincrease<ram_addr_size>(PC);

  S = S;

  SP = SP;

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

end where



in(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  

  PC = increase<ram_addr_size>(PC);

  S = S;

  SP = SP;

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



end where



out(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  

  PC = increase<ram_addr_size>(PC);

  S = S;

  SP = SP;

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

end where



push(r:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  Rr = pop_register(r, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);



  out = ram<instr_size, word>(SP, 1, SP, Rr);



  SP = decrease<ram_addr_size>(SP);

  S = S;

  PC = increase<ram_addr_size>(PC);

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

end where



pop(d:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  SP = increase<ram_addr_size>(SP);



  out = ram<instr_size, word>(SP, 0, SP, one<word>()); 



  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = push_register(d, out, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  PC = increase<ram_addr_size>(PC);

end where



mov(d:[reg_addr], r:[reg_addr], regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where 

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31) = regs_identity(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31);

  S = S;

  SP = SP;

  PC = PC;

end where



route00010(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o5 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = cpse(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = cp(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route00011(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o5 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = sub(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = adc(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route0011(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = cpi(o4.o5.o6.o7.o12.o13.o14.o15, o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



route00100(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o5 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = and_op(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = eor(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route00001(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o5 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = sbc(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = add(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route00000(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o5 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = nop(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = cpc(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) 

  end if

end where



route00101(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o5 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = or_op(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = mov(o6.o12.o13.o14.o15, o7.o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route0001(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o4 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route00010(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route00011(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route0010(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o4 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route00100(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route00101(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route0000(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o4 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route00000(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route00001(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route0101(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = subi(o4.o5.o6.o7.o12.o13.o14.o15, o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



route0100(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = sbci(o4.o5.o6.o7.o12.o13.o14.o15, o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



route0111(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = andi(o4.o5.o6.o7.o12.o13.o14.o15, o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



route0110(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = sbr(o4.o5.o6.o7.o12.o13.o14.o15, o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



route001(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route0010(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route0011(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route000(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route0000(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route0001(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route010(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route0100(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route0101(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route011(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route0110(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route0111(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route00(o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o2 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route000(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route001(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route01(o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o2 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route010(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route011(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route0(o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o1 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route00(o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route01(o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route111100(o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o13 = 0 then

    if o14 = 0 then

      if o15 = 0 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brlo(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = breq(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      end if

    else

      if o15 = 0 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brmi(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brvs(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      end if     

    end if

  else	

    if o14 = 0 then

      if o15 = 0 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brlt(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brhs(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      end if

    else

      if o15 = 0 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brts(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = nop(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) 

      end if

    end if

  end if

end where



route111110(o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o6 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = bld(o7.o8.o9.o10.o11, o13.o14.o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = bst(o7.o8.o9.o10.o11, o13.o14.o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if		  

end where



route111101(o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o13 = 0 then

    if o14 = 0 then

      if o15 = 0 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brsh(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brne(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      end if

    else

      if o15 = 0 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brpl(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brie(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      end if     

    end if

  else	

    if o14 = 0 then

      if o15 = 0 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brge(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brhc(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      end if

    else

      if o15 = 0 then 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brtc(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      else 

        (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = brid(o6.o7.o8.o9.o10.o11.o12, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

      end if

    end if

  end if

end where



route11111(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o5 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route111110(o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = sbrs(o7.o8.o9.o10.o11, o13.o14.o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route11110(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o5 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route111100(o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route111101(o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route1111(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o4 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route11110(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route11111(o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route1001(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = nop(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) 

end where



route1000(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o6 = 0 then

    

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = nop(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) 

  else

    

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = nop(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) 

  end if

end where



route1010(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o4 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = lds(o5.o6.o7.o12.o13.o14.o15, o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = sts(o5.o6.o7.o12.o13.o14.o15, o8.o9.o10.o11, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route1011(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o4 = 0 then

    

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = nop(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) 

  else

    

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = nop(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) 

  end if

end where



route1110(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = nop(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) 

end where



route1101(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = rcall(o4.o5.o6.o7.o8.o9.o10.o11.o12.o13.o14.o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



route1100(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = rjmp(o4.o5.o6.o7.o8.o9.o10.o11.o12.o13.o14.o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

end where



route101(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route1010(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route1011(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route100(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route1000(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route1001(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route110(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route1100(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route1101(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route111(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o3 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route1110(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route1111(o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route11(o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o2 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route110(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route111(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route10(o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o2 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route100(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route101(o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



route1(o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o1 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route10(o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route11(o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where





route(o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  if o0 = 0 then

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route0(o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  else 

    (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route1(o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP)

  end if

end where



mainLoop(regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) = (regs16:[word], regs17:[word], regs18:[word], regs19:[word], regs20:[word], regs21:[word], regs22:[word], regs23:[word], regs24:[word], regs25:[word], regs26:[word], regs27:[word], regs28:[word], regs29:[word], regs30:[word], regs31:[word], S:[word], PC:[word+word], SP:[word+word]) where

  

  opcode = rom<instr_addr_size, instr_size>(PC);

  (op0, op1, op2, op3, op4, op5, op6, op7, op8, op9, op10, op11, op12, op13, op14, op15) = op_decomposer(opcode); 

  

  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = route(op0, op1, op2, op3, op4, op5, op6, op7, op8, op9, op10, op11, op12, op13, op14, op15, regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP);



  

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = mainLoop(regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP);

end where



main() = () where

  

  RAMEND = allone<instr_size>();

  z = 0;

  (regs16, regs17, regs18, regs19, regs20, regs21, regs22, regs23, regs24, regs25, regs26, regs27, regs28, regs29, regs30, regs31, S, PC, SP) = init_register(z, RAMEND);

  

end where

